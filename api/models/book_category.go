// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BookCategory is an object representing the database table.
type BookCategory struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Level          int         `boil:"level" json:"level" toml:"level" yaml:"level"`
	Title          string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	EnglishTitle   null.String `boil:"english_title" json:"english_title,omitempty" toml:"english_title" yaml:"english_title,omitempty"`
	Slug           null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	LongSlug       null.String `boil:"long_slug" json:"long_slug,omitempty" toml:"long_slug" yaml:"long_slug,omitempty"`
	Subject        null.String `boil:"subject" json:"subject,omitempty" toml:"subject" yaml:"subject,omitempty"`
	ParentID       null.Int    `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Position       null.Int    `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	StoresID       null.Int    `boil:"stores_id" json:"stores_id,omitempty" toml:"stores_id" yaml:"stores_id,omitempty"`
	BisacID        null.Int    `boil:"bisac_id" json:"bisac_id,omitempty" toml:"bisac_id" yaml:"bisac_id,omitempty"`
	Status         bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Code           null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	BisacTitle     null.String `boil:"bisac_title" json:"bisac_title,omitempty" toml:"bisac_title" yaml:"bisac_title,omitempty"`
	ContentFormat  null.String `boil:"content_format" json:"content_format,omitempty" toml:"content_format" yaml:"content_format,omitempty"`
	Image          null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	TotalBooks     int         `boil:"total_books" json:"total_books" toml:"total_books" yaml:"total_books"`
	SeoTitle       null.String `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription null.String `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`
	Canonical      null.String `boil:"canonical" json:"canonical,omitempty" toml:"canonical" yaml:"canonical,omitempty"`
	SeoFrontShow   null.Bool   `boil:"seo_front_show" json:"seo_front_show,omitempty" toml:"seo_front_show" yaml:"seo_front_show,omitempty"`

	R *bookCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookCategoryColumns = struct {
	ID             string
	Level          string
	Title          string
	EnglishTitle   string
	Slug           string
	LongSlug       string
	Subject        string
	ParentID       string
	Position       string
	StoresID       string
	BisacID        string
	Status         string
	Code           string
	BisacTitle     string
	ContentFormat  string
	Image          string
	TotalBooks     string
	SeoTitle       string
	SeoDescription string
	Canonical      string
	SeoFrontShow   string
}{
	ID:             "id",
	Level:          "level",
	Title:          "title",
	EnglishTitle:   "english_title",
	Slug:           "slug",
	LongSlug:       "long_slug",
	Subject:        "subject",
	ParentID:       "parent_id",
	Position:       "position",
	StoresID:       "stores_id",
	BisacID:        "bisac_id",
	Status:         "status",
	Code:           "code",
	BisacTitle:     "bisac_title",
	ContentFormat:  "content_format",
	Image:          "image",
	TotalBooks:     "total_books",
	SeoTitle:       "seo_title",
	SeoDescription: "seo_description",
	Canonical:      "canonical",
	SeoFrontShow:   "seo_front_show",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BookCategoryWhere = struct {
	ID             whereHelperint
	Level          whereHelperint
	Title          whereHelperstring
	EnglishTitle   whereHelpernull_String
	Slug           whereHelpernull_String
	LongSlug       whereHelpernull_String
	Subject        whereHelpernull_String
	ParentID       whereHelpernull_Int
	Position       whereHelpernull_Int
	StoresID       whereHelpernull_Int
	BisacID        whereHelpernull_Int
	Status         whereHelperbool
	Code           whereHelpernull_String
	BisacTitle     whereHelpernull_String
	ContentFormat  whereHelpernull_String
	Image          whereHelpernull_String
	TotalBooks     whereHelperint
	SeoTitle       whereHelpernull_String
	SeoDescription whereHelpernull_String
	Canonical      whereHelpernull_String
	SeoFrontShow   whereHelpernull_Bool
}{
	ID:             whereHelperint{field: `id`},
	Level:          whereHelperint{field: `level`},
	Title:          whereHelperstring{field: `title`},
	EnglishTitle:   whereHelpernull_String{field: `english_title`},
	Slug:           whereHelpernull_String{field: `slug`},
	LongSlug:       whereHelpernull_String{field: `long_slug`},
	Subject:        whereHelpernull_String{field: `subject`},
	ParentID:       whereHelpernull_Int{field: `parent_id`},
	Position:       whereHelpernull_Int{field: `position`},
	StoresID:       whereHelpernull_Int{field: `stores_id`},
	BisacID:        whereHelpernull_Int{field: `bisac_id`},
	Status:         whereHelperbool{field: `status`},
	Code:           whereHelpernull_String{field: `code`},
	BisacTitle:     whereHelpernull_String{field: `bisac_title`},
	ContentFormat:  whereHelpernull_String{field: `content_format`},
	Image:          whereHelpernull_String{field: `image`},
	TotalBooks:     whereHelperint{field: `total_books`},
	SeoTitle:       whereHelpernull_String{field: `seo_title`},
	SeoDescription: whereHelpernull_String{field: `seo_description`},
	Canonical:      whereHelpernull_String{field: `canonical`},
	SeoFrontShow:   whereHelpernull_Bool{field: `seo_front_show`},
}

// BookCategoryRels is where relationship names are stored.
var BookCategoryRels = struct {
	Parent                      string
	ParentBookCategories        string
	CategoryBookCategoryAssigns string
}{
	Parent:                      "Parent",
	ParentBookCategories:        "ParentBookCategories",
	CategoryBookCategoryAssigns: "CategoryBookCategoryAssigns",
}

// bookCategoryR is where relationships are stored.
type bookCategoryR struct {
	Parent                      *BookCategory
	ParentBookCategories        BookCategorySlice
	CategoryBookCategoryAssigns BookCategoryAssignSlice
}

// NewStruct creates a new relationship struct
func (*bookCategoryR) NewStruct() *bookCategoryR {
	return &bookCategoryR{}
}

// bookCategoryL is where Load methods for each relationship are stored.
type bookCategoryL struct{}

var (
	bookCategoryColumns               = []string{"id", "level", "title", "english_title", "slug", "long_slug", "subject", "parent_id", "position", "stores_id", "bisac_id", "status", "code", "bisac_title", "content_format", "image", "total_books", "seo_title", "seo_description", "canonical", "seo_front_show"}
	bookCategoryColumnsWithoutDefault = []string{"level", "title", "english_title", "slug", "long_slug", "subject", "parent_id", "position", "stores_id", "bisac_id", "code", "bisac_title", "content_format", "image", "seo_title", "seo_description", "canonical"}
	bookCategoryColumnsWithDefault    = []string{"id", "status", "total_books", "seo_front_show"}
	bookCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// BookCategorySlice is an alias for a slice of pointers to BookCategory.
	// This should generally be used opposed to []BookCategory.
	BookCategorySlice []*BookCategory
	// BookCategoryHook is the signature for custom BookCategory hook methods
	BookCategoryHook func(context.Context, boil.ContextExecutor, *BookCategory) error

	bookCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookCategoryType                 = reflect.TypeOf(&BookCategory{})
	bookCategoryMapping              = queries.MakeStructMapping(bookCategoryType)
	bookCategoryPrimaryKeyMapping, _ = queries.BindMapping(bookCategoryType, bookCategoryMapping, bookCategoryPrimaryKeyColumns)
	bookCategoryInsertCacheMut       sync.RWMutex
	bookCategoryInsertCache          = make(map[string]insertCache)
	bookCategoryUpdateCacheMut       sync.RWMutex
	bookCategoryUpdateCache          = make(map[string]updateCache)
	bookCategoryUpsertCacheMut       sync.RWMutex
	bookCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookCategoryBeforeInsertHooks []BookCategoryHook
var bookCategoryBeforeUpdateHooks []BookCategoryHook
var bookCategoryBeforeDeleteHooks []BookCategoryHook
var bookCategoryBeforeUpsertHooks []BookCategoryHook

var bookCategoryAfterInsertHooks []BookCategoryHook
var bookCategoryAfterSelectHooks []BookCategoryHook
var bookCategoryAfterUpdateHooks []BookCategoryHook
var bookCategoryAfterDeleteHooks []BookCategoryHook
var bookCategoryAfterUpsertHooks []BookCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookCategoryHook registers your hook function for all future operations.
func AddBookCategoryHook(hookPoint boil.HookPoint, bookCategoryHook BookCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bookCategoryBeforeInsertHooks = append(bookCategoryBeforeInsertHooks, bookCategoryHook)
	case boil.BeforeUpdateHook:
		bookCategoryBeforeUpdateHooks = append(bookCategoryBeforeUpdateHooks, bookCategoryHook)
	case boil.BeforeDeleteHook:
		bookCategoryBeforeDeleteHooks = append(bookCategoryBeforeDeleteHooks, bookCategoryHook)
	case boil.BeforeUpsertHook:
		bookCategoryBeforeUpsertHooks = append(bookCategoryBeforeUpsertHooks, bookCategoryHook)
	case boil.AfterInsertHook:
		bookCategoryAfterInsertHooks = append(bookCategoryAfterInsertHooks, bookCategoryHook)
	case boil.AfterSelectHook:
		bookCategoryAfterSelectHooks = append(bookCategoryAfterSelectHooks, bookCategoryHook)
	case boil.AfterUpdateHook:
		bookCategoryAfterUpdateHooks = append(bookCategoryAfterUpdateHooks, bookCategoryHook)
	case boil.AfterDeleteHook:
		bookCategoryAfterDeleteHooks = append(bookCategoryAfterDeleteHooks, bookCategoryHook)
	case boil.AfterUpsertHook:
		bookCategoryAfterUpsertHooks = append(bookCategoryAfterUpsertHooks, bookCategoryHook)
	}
}

// OneG returns a single bookCategory record from the query using the global executor.
func (q bookCategoryQuery) OneG(ctx context.Context) (*BookCategory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single bookCategory record from the query.
func (q bookCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookCategory, error) {
	o := &BookCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for book_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BookCategory records from the query using the global executor.
func (q bookCategoryQuery) AllG(ctx context.Context) (BookCategorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BookCategory records from the query.
func (q bookCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookCategorySlice, error) {
	var o []*BookCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookCategory slice")
	}

	if len(bookCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BookCategory records in the query, and panics on error.
func (q bookCategoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BookCategory records in the query.
func (q bookCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count book_category rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q bookCategoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if book_category exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *BookCategory) Parent(mods ...qm.QueryMod) bookCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := BookCategories(queryMods...)
	queries.SetFrom(query.Query, "`book_category`")

	return query
}

// ParentBookCategories retrieves all the book_category's BookCategories with an executor via parent_id column.
func (o *BookCategory) ParentBookCategories(mods ...qm.QueryMod) bookCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book_category`.`parent_id`=?", o.ID),
	)

	query := BookCategories(queryMods...)
	queries.SetFrom(query.Query, "`book_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book_category`.*"})
	}

	return query
}

// CategoryBookCategoryAssigns retrieves all the book_category_assign's BookCategoryAssigns with an executor via category_id column.
func (o *BookCategory) CategoryBookCategoryAssigns(mods ...qm.QueryMod) bookCategoryAssignQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book_category_assign`.`category_id`=?", o.ID),
	)

	query := BookCategoryAssigns(queryMods...)
	queries.SetFrom(query.Query, "`book_category_assign`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book_category_assign`.*"})
	}

	return query
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookCategoryL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookCategory interface{}, mods queries.Applicator) error {
	var slice []*BookCategory
	var object *BookCategory

	if singular {
		object = maybeBookCategory.(*BookCategory)
	} else {
		slice = *maybeBookCategory.(*[]*BookCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookCategoryR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book_category`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BookCategory")
	}

	var resultSlice []*BookCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BookCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_category")
	}

	if len(bookCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &bookCategoryR{}
		}
		foreign.R.ParentBookCategories = append(foreign.R.ParentBookCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &bookCategoryR{}
				}
				foreign.R.ParentBookCategories = append(foreign.R.ParentBookCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadParentBookCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookCategoryL) LoadParentBookCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookCategory interface{}, mods queries.Applicator) error {
	var slice []*BookCategory
	var object *BookCategory

	if singular {
		object = maybeBookCategory.(*BookCategory)
	} else {
		slice = *maybeBookCategory.(*[]*BookCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book_category`), qm.WhereIn(`parent_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book_category")
	}

	var resultSlice []*BookCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_category")
	}

	if len(bookCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentBookCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookCategoryR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentBookCategories = append(local.R.ParentBookCategories, foreign)
				if foreign.R == nil {
					foreign.R = &bookCategoryR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryBookCategoryAssigns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookCategoryL) LoadCategoryBookCategoryAssigns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookCategory interface{}, mods queries.Applicator) error {
	var slice []*BookCategory
	var object *BookCategory

	if singular {
		object = maybeBookCategory.(*BookCategory)
	} else {
		slice = *maybeBookCategory.(*[]*BookCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book_category_assign`), qm.WhereIn(`category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book_category_assign")
	}

	var resultSlice []*BookCategoryAssign
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book_category_assign")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book_category_assign")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_category_assign")
	}

	if len(bookCategoryAssignAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryBookCategoryAssigns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookCategoryAssignR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryBookCategoryAssigns = append(local.R.CategoryBookCategoryAssigns, foreign)
				if foreign.R == nil {
					foreign.R = &bookCategoryAssignR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// SetParentG of the bookCategory to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentBookCategories.
// Uses the global database handle.
func (o *BookCategory) SetParentG(ctx context.Context, insert bool, related *BookCategory) error {
	return o.SetParent(ctx, boil.GetContextDB(), insert, related)
}

// SetParent of the bookCategory to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentBookCategories.
func (o *BookCategory) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BookCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `book_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
		strmangle.WhereClause("`", "`", 0, bookCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &bookCategoryR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &bookCategoryR{
			ParentBookCategories: BookCategorySlice{o},
		}
	} else {
		related.R.ParentBookCategories = append(related.R.ParentBookCategories, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *BookCategory) RemoveParentG(ctx context.Context, related *BookCategory) error {
	return o.RemoveParent(ctx, boil.GetContextDB(), related)
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BookCategory) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *BookCategory) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Parent = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentBookCategories {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentBookCategories)
		if ln > 1 && i < ln-1 {
			related.R.ParentBookCategories[i] = related.R.ParentBookCategories[ln-1]
		}
		related.R.ParentBookCategories = related.R.ParentBookCategories[:ln-1]
		break
	}
	return nil
}

// AddParentBookCategoriesG adds the given related objects to the existing relationships
// of the book_category, optionally inserting them as new records.
// Appends related to o.R.ParentBookCategories.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *BookCategory) AddParentBookCategoriesG(ctx context.Context, insert bool, related ...*BookCategory) error {
	return o.AddParentBookCategories(ctx, boil.GetContextDB(), insert, related...)
}

// AddParentBookCategories adds the given related objects to the existing relationships
// of the book_category, optionally inserting them as new records.
// Appends related to o.R.ParentBookCategories.
// Sets related.R.Parent appropriately.
func (o *BookCategory) AddParentBookCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
				strmangle.WhereClause("`", "`", 0, bookCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &bookCategoryR{
			ParentBookCategories: related,
		}
	} else {
		o.R.ParentBookCategories = append(o.R.ParentBookCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookCategoryR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentBookCategoriesG removes all previously related items of the
// book_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentBookCategories accordingly.
// Replaces o.R.ParentBookCategories with related.
// Sets related.R.Parent's ParentBookCategories accordingly.
// Uses the global database handle.
func (o *BookCategory) SetParentBookCategoriesG(ctx context.Context, insert bool, related ...*BookCategory) error {
	return o.SetParentBookCategories(ctx, boil.GetContextDB(), insert, related...)
}

// SetParentBookCategories removes all previously related items of the
// book_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentBookCategories accordingly.
// Replaces o.R.ParentBookCategories with related.
// Sets related.R.Parent's ParentBookCategories accordingly.
func (o *BookCategory) SetParentBookCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookCategory) error {
	query := "update `book_category` set `parent_id` = null where `parent_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentBookCategories {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentBookCategories = nil
	}
	return o.AddParentBookCategories(ctx, exec, insert, related...)
}

// RemoveParentBookCategoriesG relationships from objects passed in.
// Removes related items from R.ParentBookCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *BookCategory) RemoveParentBookCategoriesG(ctx context.Context, related ...*BookCategory) error {
	return o.RemoveParentBookCategories(ctx, boil.GetContextDB(), related...)
}

// RemoveParentBookCategories relationships from objects passed in.
// Removes related items from R.ParentBookCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *BookCategory) RemoveParentBookCategories(ctx context.Context, exec boil.ContextExecutor, related ...*BookCategory) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentBookCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentBookCategories)
			if ln > 1 && i < ln-1 {
				o.R.ParentBookCategories[i] = o.R.ParentBookCategories[ln-1]
			}
			o.R.ParentBookCategories = o.R.ParentBookCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryBookCategoryAssignsG adds the given related objects to the existing relationships
// of the book_category, optionally inserting them as new records.
// Appends related to o.R.CategoryBookCategoryAssigns.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *BookCategory) AddCategoryBookCategoryAssignsG(ctx context.Context, insert bool, related ...*BookCategoryAssign) error {
	return o.AddCategoryBookCategoryAssigns(ctx, boil.GetContextDB(), insert, related...)
}

// AddCategoryBookCategoryAssigns adds the given related objects to the existing relationships
// of the book_category, optionally inserting them as new records.
// Appends related to o.R.CategoryBookCategoryAssigns.
// Sets related.R.Category appropriately.
func (o *BookCategory) AddCategoryBookCategoryAssigns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookCategoryAssign) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book_category_assign` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, bookCategoryAssignPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bookCategoryR{
			CategoryBookCategoryAssigns: related,
		}
	} else {
		o.R.CategoryBookCategoryAssigns = append(o.R.CategoryBookCategoryAssigns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookCategoryAssignR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// BookCategories retrieves all the records using an executor.
func BookCategories(mods ...qm.QueryMod) bookCategoryQuery {
	mods = append(mods, qm.From("`book_category`"))
	return bookCategoryQuery{NewQuery(mods...)}
}

// FindBookCategoryG retrieves a single record by ID.
func FindBookCategoryG(ctx context.Context, iD int, selectCols ...string) (*BookCategory, error) {
	return FindBookCategory(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBookCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BookCategory, error) {
	bookCategoryObj := &BookCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `book_category` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from book_category")
	}

	return bookCategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BookCategory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookCategoryInsertCacheMut.RLock()
	cache, cached := bookCategoryInsertCache[key]
	bookCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookCategoryColumns,
			bookCategoryColumnsWithDefault,
			bookCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `book_category` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `book_category` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `book_category` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bookCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into book_category")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bookCategoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for book_category")
	}

CacheNoHooks:
	if !cached {
		bookCategoryInsertCacheMut.Lock()
		bookCategoryInsertCache[key] = cache
		bookCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BookCategory record using the global executor.
// See Update for more documentation.
func (o *BookCategory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BookCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookCategoryUpdateCacheMut.RLock()
	cache, cached := bookCategoryUpdateCache[key]
	bookCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookCategoryColumns,
			bookCategoryPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update book_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `book_category` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bookCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, append(wl, bookCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update book_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for book_category")
	}

	if !cached {
		bookCategoryUpdateCacheMut.Lock()
		bookCategoryUpdateCache[key] = cache
		bookCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookCategoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for book_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for book_category")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookCategorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `book_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookCategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BookCategory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLBookCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBookCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookCategoryUpsertCacheMut.RLock()
	cache, cached := bookCategoryUpsertCache[key]
	bookCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookCategoryColumns,
			bookCategoryColumnsWithDefault,
			bookCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookCategoryColumns,
			bookCategoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert book_category, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "book_category", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `book_category` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for book_category")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bookCategoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bookCategoryType, bookCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for book_category")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for book_category")
	}

CacheNoHooks:
	if !cached {
		bookCategoryUpsertCacheMut.Lock()
		bookCategoryUpsertCache[key] = cache
		bookCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BookCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BookCategory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BookCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `book_category` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from book_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for book_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from book_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_category")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookCategorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(bookCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `book_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_category")
	}

	if len(bookCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BookCategory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BookCategory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookCategorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BookCategorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `book_category`.* FROM `book_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookCategorySlice")
	}

	*o = slice

	return nil
}

// BookCategoryExistsG checks if the BookCategory row exists.
func BookCategoryExistsG(ctx context.Context, iD int) (bool, error) {
	return BookCategoryExists(ctx, boil.GetContextDB(), iD)
}

// BookCategoryExists checks if the BookCategory row exists.
func BookCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `book_category` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if book_category exists")
	}

	return exists, nil
}
