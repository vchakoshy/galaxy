// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Author is an object representing the database table.
type Author struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Logo           null.String `boil:"logo" json:"logo,omitempty" toml:"logo" yaml:"logo,omitempty"`
	Cover          null.String `boil:"cover" json:"cover,omitempty" toml:"cover" yaml:"cover,omitempty"`
	Comment        null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Slug           null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	SeoTitle       null.String `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription null.String `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`

	R *authorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorColumns = struct {
	ID             string
	Name           string
	Logo           string
	Cover          string
	Comment        string
	Slug           string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "id",
	Name:           "name",
	Logo:           "logo",
	Cover:          "cover",
	Comment:        "comment",
	Slug:           "slug",
	SeoTitle:       "seo_title",
	SeoDescription: "seo_description",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuthorWhere = struct {
	ID             whereHelperint
	Name           whereHelperstring
	Logo           whereHelpernull_String
	Cover          whereHelpernull_String
	Comment        whereHelpernull_String
	Slug           whereHelpernull_String
	SeoTitle       whereHelpernull_String
	SeoDescription whereHelpernull_String
}{
	ID:             whereHelperint{field: "`author`.`id`"},
	Name:           whereHelperstring{field: "`author`.`name`"},
	Logo:           whereHelpernull_String{field: "`author`.`logo`"},
	Cover:          whereHelpernull_String{field: "`author`.`cover`"},
	Comment:        whereHelpernull_String{field: "`author`.`comment`"},
	Slug:           whereHelpernull_String{field: "`author`.`slug`"},
	SeoTitle:       whereHelpernull_String{field: "`author`.`seo_title`"},
	SeoDescription: whereHelpernull_String{field: "`author`.`seo_description`"},
}

// AuthorRels is where relationship names are stored.
var AuthorRels = struct {
	Books            string
	TranslatorBooks  string
	Author2Books     string
	Author3Books     string
	Translator2Books string
	Translator3Books string
	News             string
	TranslatorNews   string
	ProposeBookLists string
}{
	Books:            "Books",
	TranslatorBooks:  "TranslatorBooks",
	Author2Books:     "Author2Books",
	Author3Books:     "Author3Books",
	Translator2Books: "Translator2Books",
	Translator3Books: "Translator3Books",
	News:             "News",
	TranslatorNews:   "TranslatorNews",
	ProposeBookLists: "ProposeBookLists",
}

// authorR is where relationships are stored.
type authorR struct {
	Books            BookSlice
	TranslatorBooks  BookSlice
	Author2Books     BookSlice
	Author3Books     BookSlice
	Translator2Books BookSlice
	Translator3Books BookSlice
	News             NewsSlice
	TranslatorNews   NewsSlice
	ProposeBookLists ProposeBookListSlice
}

// NewStruct creates a new relationship struct
func (*authorR) NewStruct() *authorR {
	return &authorR{}
}

// authorL is where Load methods for each relationship are stored.
type authorL struct{}

var (
	authorAllColumns            = []string{"id", "name", "logo", "cover", "comment", "slug", "seo_title", "seo_description"}
	authorColumnsWithoutDefault = []string{"name", "logo", "cover", "comment", "slug", "seo_title", "seo_description"}
	authorColumnsWithDefault    = []string{"id"}
	authorPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthorSlice is an alias for a slice of pointers to Author.
	// This should generally be used opposed to []Author.
	AuthorSlice []*Author
	// AuthorHook is the signature for custom Author hook methods
	AuthorHook func(context.Context, boil.ContextExecutor, *Author) error

	authorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorType                 = reflect.TypeOf(&Author{})
	authorMapping              = queries.MakeStructMapping(authorType)
	authorPrimaryKeyMapping, _ = queries.BindMapping(authorType, authorMapping, authorPrimaryKeyColumns)
	authorInsertCacheMut       sync.RWMutex
	authorInsertCache          = make(map[string]insertCache)
	authorUpdateCacheMut       sync.RWMutex
	authorUpdateCache          = make(map[string]updateCache)
	authorUpsertCacheMut       sync.RWMutex
	authorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorBeforeInsertHooks []AuthorHook
var authorBeforeUpdateHooks []AuthorHook
var authorBeforeDeleteHooks []AuthorHook
var authorBeforeUpsertHooks []AuthorHook

var authorAfterInsertHooks []AuthorHook
var authorAfterSelectHooks []AuthorHook
var authorAfterUpdateHooks []AuthorHook
var authorAfterDeleteHooks []AuthorHook
var authorAfterUpsertHooks []AuthorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Author) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Author) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Author) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Author) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Author) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Author) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Author) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Author) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Author) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorHook registers your hook function for all future operations.
func AddAuthorHook(hookPoint boil.HookPoint, authorHook AuthorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authorBeforeInsertHooks = append(authorBeforeInsertHooks, authorHook)
	case boil.BeforeUpdateHook:
		authorBeforeUpdateHooks = append(authorBeforeUpdateHooks, authorHook)
	case boil.BeforeDeleteHook:
		authorBeforeDeleteHooks = append(authorBeforeDeleteHooks, authorHook)
	case boil.BeforeUpsertHook:
		authorBeforeUpsertHooks = append(authorBeforeUpsertHooks, authorHook)
	case boil.AfterInsertHook:
		authorAfterInsertHooks = append(authorAfterInsertHooks, authorHook)
	case boil.AfterSelectHook:
		authorAfterSelectHooks = append(authorAfterSelectHooks, authorHook)
	case boil.AfterUpdateHook:
		authorAfterUpdateHooks = append(authorAfterUpdateHooks, authorHook)
	case boil.AfterDeleteHook:
		authorAfterDeleteHooks = append(authorAfterDeleteHooks, authorHook)
	case boil.AfterUpsertHook:
		authorAfterUpsertHooks = append(authorAfterUpsertHooks, authorHook)
	}
}

// OneG returns a single author record from the query using the global executor.
func (q authorQuery) OneG(ctx context.Context) (*Author, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single author record from the query.
func (q authorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Author, error) {
	o := &Author{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for author")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Author records from the query using the global executor.
func (q authorQuery) AllG(ctx context.Context) (AuthorSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Author records from the query.
func (q authorQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorSlice, error) {
	var o []*Author

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Author slice")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Author records in the query, and panics on error.
func (q authorQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Author records in the query.
func (q authorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count author rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q authorQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if author exists")
	}

	return count > 0, nil
}

// Books retrieves all the book's Books with an executor.
func (o *Author) Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`author_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// TranslatorBooks retrieves all the book's Books with an executor via translator_id column.
func (o *Author) TranslatorBooks(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`translator_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// Author2Books retrieves all the book's Books with an executor via author2_id column.
func (o *Author) Author2Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`author2_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// Author3Books retrieves all the book's Books with an executor via author3_id column.
func (o *Author) Author3Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`author3_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// Translator2Books retrieves all the book's Books with an executor via translator2_id column.
func (o *Author) Translator2Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`translator2_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// Translator3Books retrieves all the book's Books with an executor via translator3_id column.
func (o *Author) Translator3Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`translator3_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// News retrieves all the news's AllNews with an executor via author_id column.
func (o *Author) News(mods ...qm.QueryMod) newsQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`news`.`author_id`=?", o.ID),
	)

	query := AllNews(queryMods...)
	queries.SetFrom(query.Query, "`news`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`news`.*"})
	}

	return query
}

// TranslatorNews retrieves all the news's AllNews with an executor via translator_id column.
func (o *Author) TranslatorNews(mods ...qm.QueryMod) newsQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`news`.`translator_id`=?", o.ID),
	)

	query := AllNews(queryMods...)
	queries.SetFrom(query.Query, "`news`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`news`.*"})
	}

	return query
}

// ProposeBookLists retrieves all the propose_book_list's ProposeBookLists with an executor.
func (o *Author) ProposeBookLists(mods ...qm.QueryMod) proposeBookListQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`propose_book_list`.`author_id`=?", o.ID),
	)

	query := ProposeBookLists(queryMods...)
	queries.SetFrom(query.Query, "`propose_book_list`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`propose_book_list`.*"})
	}

	return query
}

// LoadBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`author_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Author = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AuthorID) {
				local.R.Books = append(local.R.Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Author = local
				break
			}
		}
	}

	return nil
}

// LoadTranslatorBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadTranslatorBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`translator_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TranslatorBooks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Translator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TranslatorID) {
				local.R.TranslatorBooks = append(local.R.TranslatorBooks, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Translator = local
				break
			}
		}
	}

	return nil
}

// LoadAuthor2Books allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadAuthor2Books(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`author2_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Author2Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Author2 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Author2ID) {
				local.R.Author2Books = append(local.R.Author2Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Author2 = local
				break
			}
		}
	}

	return nil
}

// LoadAuthor3Books allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadAuthor3Books(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`author3_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Author3Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Author3 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Author3ID) {
				local.R.Author3Books = append(local.R.Author3Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Author3 = local
				break
			}
		}
	}

	return nil
}

// LoadTranslator2Books allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadTranslator2Books(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`translator2_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Translator2Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Translator2 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Translator2ID) {
				local.R.Translator2Books = append(local.R.Translator2Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Translator2 = local
				break
			}
		}
	}

	return nil
}

// LoadTranslator3Books allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadTranslator3Books(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`translator3_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Translator3Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Translator3 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Translator3ID) {
				local.R.Translator3Books = append(local.R.Translator3Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Translator3 = local
				break
			}
		}
	}

	return nil
}

// LoadNews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadNews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`news`), qm.WhereIn(`author_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load news")
	}

	var resultSlice []*News
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice news")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on news")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for news")
	}

	if len(newsAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.News = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &newsR{}
			}
			foreign.R.Author = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AuthorID) {
				local.R.News = append(local.R.News, foreign)
				if foreign.R == nil {
					foreign.R = &newsR{}
				}
				foreign.R.Author = local
				break
			}
		}
	}

	return nil
}

// LoadTranslatorNews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadTranslatorNews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`news`), qm.WhereIn(`translator_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load news")
	}

	var resultSlice []*News
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice news")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on news")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for news")
	}

	if len(newsAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TranslatorNews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &newsR{}
			}
			foreign.R.Translator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TranslatorID) {
				local.R.TranslatorNews = append(local.R.TranslatorNews, foreign)
				if foreign.R == nil {
					foreign.R = &newsR{}
				}
				foreign.R.Translator = local
				break
			}
		}
	}

	return nil
}

// LoadProposeBookLists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorL) LoadProposeBookLists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthor interface{}, mods queries.Applicator) error {
	var slice []*Author
	var object *Author

	if singular {
		object = maybeAuthor.(*Author)
	} else {
		slice = *maybeAuthor.(*[]*Author)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`propose_book_list`), qm.WhereIn(`author_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load propose_book_list")
	}

	var resultSlice []*ProposeBookList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice propose_book_list")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on propose_book_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for propose_book_list")
	}

	if len(proposeBookListAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProposeBookLists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &proposeBookListR{}
			}
			foreign.R.Author = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AuthorID) {
				local.R.ProposeBookLists = append(local.R.ProposeBookLists, foreign)
				if foreign.R == nil {
					foreign.R = &proposeBookListR{}
				}
				foreign.R.Author = local
				break
			}
		}
	}

	return nil
}

// AddBooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.Author appropriately.
// Uses the global database handle.
func (o *Author) AddBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddBooks(ctx, boil.GetContextDB(), insert, related...)
}

// AddBooks adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.Author appropriately.
func (o *Author) AddBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			Books: related,
		}
	} else {
		o.R.Books = append(o.R.Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Author: o,
			}
		} else {
			rel.R.Author = o
		}
	}
	return nil
}

// SetBooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.Author's Books accordingly.
// Uses the global database handle.
func (o *Author) SetBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetBooks(ctx, boil.GetContextDB(), insert, related...)
}

// SetBooks removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.Author's Books accordingly.
func (o *Author) SetBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `author_id` = null where `author_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Books {
			queries.SetScanner(&rel.AuthorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Author = nil
		}

		o.R.Books = nil
	}
	return o.AddBooks(ctx, exec, insert, related...)
}

// RemoveBooksG relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
// Uses the global database handle.
func (o *Author) RemoveBooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveBooks(ctx, boil.GetContextDB(), related...)
}

// RemoveBooks relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
func (o *Author) RemoveBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorID, nil)
		if rel.R != nil {
			rel.R.Author = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Books)
			if ln > 1 && i < ln-1 {
				o.R.Books[i] = o.R.Books[ln-1]
			}
			o.R.Books = o.R.Books[:ln-1]
			break
		}
	}

	return nil
}

// AddTranslatorBooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.TranslatorBooks.
// Sets related.R.Translator appropriately.
// Uses the global database handle.
func (o *Author) AddTranslatorBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddTranslatorBooks(ctx, boil.GetContextDB(), insert, related...)
}

// AddTranslatorBooks adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.TranslatorBooks.
// Sets related.R.Translator appropriately.
func (o *Author) AddTranslatorBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TranslatorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"translator_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TranslatorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			TranslatorBooks: related,
		}
	} else {
		o.R.TranslatorBooks = append(o.R.TranslatorBooks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Translator: o,
			}
		} else {
			rel.R.Translator = o
		}
	}
	return nil
}

// SetTranslatorBooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator's TranslatorBooks accordingly.
// Replaces o.R.TranslatorBooks with related.
// Sets related.R.Translator's TranslatorBooks accordingly.
// Uses the global database handle.
func (o *Author) SetTranslatorBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetTranslatorBooks(ctx, boil.GetContextDB(), insert, related...)
}

// SetTranslatorBooks removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator's TranslatorBooks accordingly.
// Replaces o.R.TranslatorBooks with related.
// Sets related.R.Translator's TranslatorBooks accordingly.
func (o *Author) SetTranslatorBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `translator_id` = null where `translator_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TranslatorBooks {
			queries.SetScanner(&rel.TranslatorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Translator = nil
		}

		o.R.TranslatorBooks = nil
	}
	return o.AddTranslatorBooks(ctx, exec, insert, related...)
}

// RemoveTranslatorBooksG relationships from objects passed in.
// Removes related items from R.TranslatorBooks (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator.
// Uses the global database handle.
func (o *Author) RemoveTranslatorBooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveTranslatorBooks(ctx, boil.GetContextDB(), related...)
}

// RemoveTranslatorBooks relationships from objects passed in.
// Removes related items from R.TranslatorBooks (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator.
func (o *Author) RemoveTranslatorBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TranslatorID, nil)
		if rel.R != nil {
			rel.R.Translator = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("translator_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TranslatorBooks {
			if rel != ri {
				continue
			}

			ln := len(o.R.TranslatorBooks)
			if ln > 1 && i < ln-1 {
				o.R.TranslatorBooks[i] = o.R.TranslatorBooks[ln-1]
			}
			o.R.TranslatorBooks = o.R.TranslatorBooks[:ln-1]
			break
		}
	}

	return nil
}

// AddAuthor2BooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Author2Books.
// Sets related.R.Author2 appropriately.
// Uses the global database handle.
func (o *Author) AddAuthor2BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddAuthor2Books(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuthor2Books adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Author2Books.
// Sets related.R.Author2 appropriately.
func (o *Author) AddAuthor2Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Author2ID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"author2_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Author2ID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			Author2Books: related,
		}
	} else {
		o.R.Author2Books = append(o.R.Author2Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Author2: o,
			}
		} else {
			rel.R.Author2 = o
		}
	}
	return nil
}

// SetAuthor2BooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author2's Author2Books accordingly.
// Replaces o.R.Author2Books with related.
// Sets related.R.Author2's Author2Books accordingly.
// Uses the global database handle.
func (o *Author) SetAuthor2BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetAuthor2Books(ctx, boil.GetContextDB(), insert, related...)
}

// SetAuthor2Books removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author2's Author2Books accordingly.
// Replaces o.R.Author2Books with related.
// Sets related.R.Author2's Author2Books accordingly.
func (o *Author) SetAuthor2Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `author2_id` = null where `author2_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Author2Books {
			queries.SetScanner(&rel.Author2ID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Author2 = nil
		}

		o.R.Author2Books = nil
	}
	return o.AddAuthor2Books(ctx, exec, insert, related...)
}

// RemoveAuthor2BooksG relationships from objects passed in.
// Removes related items from R.Author2Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author2.
// Uses the global database handle.
func (o *Author) RemoveAuthor2BooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveAuthor2Books(ctx, boil.GetContextDB(), related...)
}

// RemoveAuthor2Books relationships from objects passed in.
// Removes related items from R.Author2Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author2.
func (o *Author) RemoveAuthor2Books(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Author2ID, nil)
		if rel.R != nil {
			rel.R.Author2 = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("author2_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Author2Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Author2Books)
			if ln > 1 && i < ln-1 {
				o.R.Author2Books[i] = o.R.Author2Books[ln-1]
			}
			o.R.Author2Books = o.R.Author2Books[:ln-1]
			break
		}
	}

	return nil
}

// AddAuthor3BooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Author3Books.
// Sets related.R.Author3 appropriately.
// Uses the global database handle.
func (o *Author) AddAuthor3BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddAuthor3Books(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuthor3Books adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Author3Books.
// Sets related.R.Author3 appropriately.
func (o *Author) AddAuthor3Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Author3ID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"author3_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Author3ID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			Author3Books: related,
		}
	} else {
		o.R.Author3Books = append(o.R.Author3Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Author3: o,
			}
		} else {
			rel.R.Author3 = o
		}
	}
	return nil
}

// SetAuthor3BooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author3's Author3Books accordingly.
// Replaces o.R.Author3Books with related.
// Sets related.R.Author3's Author3Books accordingly.
// Uses the global database handle.
func (o *Author) SetAuthor3BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetAuthor3Books(ctx, boil.GetContextDB(), insert, related...)
}

// SetAuthor3Books removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author3's Author3Books accordingly.
// Replaces o.R.Author3Books with related.
// Sets related.R.Author3's Author3Books accordingly.
func (o *Author) SetAuthor3Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `author3_id` = null where `author3_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Author3Books {
			queries.SetScanner(&rel.Author3ID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Author3 = nil
		}

		o.R.Author3Books = nil
	}
	return o.AddAuthor3Books(ctx, exec, insert, related...)
}

// RemoveAuthor3BooksG relationships from objects passed in.
// Removes related items from R.Author3Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author3.
// Uses the global database handle.
func (o *Author) RemoveAuthor3BooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveAuthor3Books(ctx, boil.GetContextDB(), related...)
}

// RemoveAuthor3Books relationships from objects passed in.
// Removes related items from R.Author3Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Author3.
func (o *Author) RemoveAuthor3Books(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Author3ID, nil)
		if rel.R != nil {
			rel.R.Author3 = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("author3_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Author3Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Author3Books)
			if ln > 1 && i < ln-1 {
				o.R.Author3Books[i] = o.R.Author3Books[ln-1]
			}
			o.R.Author3Books = o.R.Author3Books[:ln-1]
			break
		}
	}

	return nil
}

// AddTranslator2BooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Translator2Books.
// Sets related.R.Translator2 appropriately.
// Uses the global database handle.
func (o *Author) AddTranslator2BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddTranslator2Books(ctx, boil.GetContextDB(), insert, related...)
}

// AddTranslator2Books adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Translator2Books.
// Sets related.R.Translator2 appropriately.
func (o *Author) AddTranslator2Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Translator2ID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"translator2_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Translator2ID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			Translator2Books: related,
		}
	} else {
		o.R.Translator2Books = append(o.R.Translator2Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Translator2: o,
			}
		} else {
			rel.R.Translator2 = o
		}
	}
	return nil
}

// SetTranslator2BooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator2's Translator2Books accordingly.
// Replaces o.R.Translator2Books with related.
// Sets related.R.Translator2's Translator2Books accordingly.
// Uses the global database handle.
func (o *Author) SetTranslator2BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetTranslator2Books(ctx, boil.GetContextDB(), insert, related...)
}

// SetTranslator2Books removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator2's Translator2Books accordingly.
// Replaces o.R.Translator2Books with related.
// Sets related.R.Translator2's Translator2Books accordingly.
func (o *Author) SetTranslator2Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `translator2_id` = null where `translator2_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Translator2Books {
			queries.SetScanner(&rel.Translator2ID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Translator2 = nil
		}

		o.R.Translator2Books = nil
	}
	return o.AddTranslator2Books(ctx, exec, insert, related...)
}

// RemoveTranslator2BooksG relationships from objects passed in.
// Removes related items from R.Translator2Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator2.
// Uses the global database handle.
func (o *Author) RemoveTranslator2BooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveTranslator2Books(ctx, boil.GetContextDB(), related...)
}

// RemoveTranslator2Books relationships from objects passed in.
// Removes related items from R.Translator2Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator2.
func (o *Author) RemoveTranslator2Books(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Translator2ID, nil)
		if rel.R != nil {
			rel.R.Translator2 = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("translator2_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Translator2Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Translator2Books)
			if ln > 1 && i < ln-1 {
				o.R.Translator2Books[i] = o.R.Translator2Books[ln-1]
			}
			o.R.Translator2Books = o.R.Translator2Books[:ln-1]
			break
		}
	}

	return nil
}

// AddTranslator3BooksG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Translator3Books.
// Sets related.R.Translator3 appropriately.
// Uses the global database handle.
func (o *Author) AddTranslator3BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddTranslator3Books(ctx, boil.GetContextDB(), insert, related...)
}

// AddTranslator3Books adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.Translator3Books.
// Sets related.R.Translator3 appropriately.
func (o *Author) AddTranslator3Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Translator3ID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"translator3_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Translator3ID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			Translator3Books: related,
		}
	} else {
		o.R.Translator3Books = append(o.R.Translator3Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Translator3: o,
			}
		} else {
			rel.R.Translator3 = o
		}
	}
	return nil
}

// SetTranslator3BooksG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator3's Translator3Books accordingly.
// Replaces o.R.Translator3Books with related.
// Sets related.R.Translator3's Translator3Books accordingly.
// Uses the global database handle.
func (o *Author) SetTranslator3BooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetTranslator3Books(ctx, boil.GetContextDB(), insert, related...)
}

// SetTranslator3Books removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator3's Translator3Books accordingly.
// Replaces o.R.Translator3Books with related.
// Sets related.R.Translator3's Translator3Books accordingly.
func (o *Author) SetTranslator3Books(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `translator3_id` = null where `translator3_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Translator3Books {
			queries.SetScanner(&rel.Translator3ID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Translator3 = nil
		}

		o.R.Translator3Books = nil
	}
	return o.AddTranslator3Books(ctx, exec, insert, related...)
}

// RemoveTranslator3BooksG relationships from objects passed in.
// Removes related items from R.Translator3Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator3.
// Uses the global database handle.
func (o *Author) RemoveTranslator3BooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveTranslator3Books(ctx, boil.GetContextDB(), related...)
}

// RemoveTranslator3Books relationships from objects passed in.
// Removes related items from R.Translator3Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator3.
func (o *Author) RemoveTranslator3Books(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Translator3ID, nil)
		if rel.R != nil {
			rel.R.Translator3 = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("translator3_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Translator3Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Translator3Books)
			if ln > 1 && i < ln-1 {
				o.R.Translator3Books[i] = o.R.Translator3Books[ln-1]
			}
			o.R.Translator3Books = o.R.Translator3Books[:ln-1]
			break
		}
	}

	return nil
}

// AddNewsG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.News.
// Sets related.R.Author appropriately.
// Uses the global database handle.
func (o *Author) AddNewsG(ctx context.Context, insert bool, related ...*News) error {
	return o.AddNews(ctx, boil.GetContextDB(), insert, related...)
}

// AddNews adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.News.
// Sets related.R.Author appropriately.
func (o *Author) AddNews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*News) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `news` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
				strmangle.WhereClause("`", "`", 0, newsPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			News: related,
		}
	} else {
		o.R.News = append(o.R.News, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &newsR{
				Author: o,
			}
		} else {
			rel.R.Author = o
		}
	}
	return nil
}

// SetNewsG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's News accordingly.
// Replaces o.R.News with related.
// Sets related.R.Author's News accordingly.
// Uses the global database handle.
func (o *Author) SetNewsG(ctx context.Context, insert bool, related ...*News) error {
	return o.SetNews(ctx, boil.GetContextDB(), insert, related...)
}

// SetNews removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's News accordingly.
// Replaces o.R.News with related.
// Sets related.R.Author's News accordingly.
func (o *Author) SetNews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*News) error {
	query := "update `news` set `author_id` = null where `author_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.News {
			queries.SetScanner(&rel.AuthorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Author = nil
		}

		o.R.News = nil
	}
	return o.AddNews(ctx, exec, insert, related...)
}

// RemoveNewsG relationships from objects passed in.
// Removes related items from R.News (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
// Uses the global database handle.
func (o *Author) RemoveNewsG(ctx context.Context, related ...*News) error {
	return o.RemoveNews(ctx, boil.GetContextDB(), related...)
}

// RemoveNews relationships from objects passed in.
// Removes related items from R.News (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
func (o *Author) RemoveNews(ctx context.Context, exec boil.ContextExecutor, related ...*News) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorID, nil)
		if rel.R != nil {
			rel.R.Author = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.News {
			if rel != ri {
				continue
			}

			ln := len(o.R.News)
			if ln > 1 && i < ln-1 {
				o.R.News[i] = o.R.News[ln-1]
			}
			o.R.News = o.R.News[:ln-1]
			break
		}
	}

	return nil
}

// AddTranslatorNewsG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.TranslatorNews.
// Sets related.R.Translator appropriately.
// Uses the global database handle.
func (o *Author) AddTranslatorNewsG(ctx context.Context, insert bool, related ...*News) error {
	return o.AddTranslatorNews(ctx, boil.GetContextDB(), insert, related...)
}

// AddTranslatorNews adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.TranslatorNews.
// Sets related.R.Translator appropriately.
func (o *Author) AddTranslatorNews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*News) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TranslatorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `news` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"translator_id"}),
				strmangle.WhereClause("`", "`", 0, newsPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TranslatorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			TranslatorNews: related,
		}
	} else {
		o.R.TranslatorNews = append(o.R.TranslatorNews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &newsR{
				Translator: o,
			}
		} else {
			rel.R.Translator = o
		}
	}
	return nil
}

// SetTranslatorNewsG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator's TranslatorNews accordingly.
// Replaces o.R.TranslatorNews with related.
// Sets related.R.Translator's TranslatorNews accordingly.
// Uses the global database handle.
func (o *Author) SetTranslatorNewsG(ctx context.Context, insert bool, related ...*News) error {
	return o.SetTranslatorNews(ctx, boil.GetContextDB(), insert, related...)
}

// SetTranslatorNews removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translator's TranslatorNews accordingly.
// Replaces o.R.TranslatorNews with related.
// Sets related.R.Translator's TranslatorNews accordingly.
func (o *Author) SetTranslatorNews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*News) error {
	query := "update `news` set `translator_id` = null where `translator_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TranslatorNews {
			queries.SetScanner(&rel.TranslatorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Translator = nil
		}

		o.R.TranslatorNews = nil
	}
	return o.AddTranslatorNews(ctx, exec, insert, related...)
}

// RemoveTranslatorNewsG relationships from objects passed in.
// Removes related items from R.TranslatorNews (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator.
// Uses the global database handle.
func (o *Author) RemoveTranslatorNewsG(ctx context.Context, related ...*News) error {
	return o.RemoveTranslatorNews(ctx, boil.GetContextDB(), related...)
}

// RemoveTranslatorNews relationships from objects passed in.
// Removes related items from R.TranslatorNews (uses pointer comparison, removal does not keep order)
// Sets related.R.Translator.
func (o *Author) RemoveTranslatorNews(ctx context.Context, exec boil.ContextExecutor, related ...*News) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TranslatorID, nil)
		if rel.R != nil {
			rel.R.Translator = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("translator_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TranslatorNews {
			if rel != ri {
				continue
			}

			ln := len(o.R.TranslatorNews)
			if ln > 1 && i < ln-1 {
				o.R.TranslatorNews[i] = o.R.TranslatorNews[ln-1]
			}
			o.R.TranslatorNews = o.R.TranslatorNews[:ln-1]
			break
		}
	}

	return nil
}

// AddProposeBookListsG adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.ProposeBookLists.
// Sets related.R.Author appropriately.
// Uses the global database handle.
func (o *Author) AddProposeBookListsG(ctx context.Context, insert bool, related ...*ProposeBookList) error {
	return o.AddProposeBookLists(ctx, boil.GetContextDB(), insert, related...)
}

// AddProposeBookLists adds the given related objects to the existing relationships
// of the author, optionally inserting them as new records.
// Appends related to o.R.ProposeBookLists.
// Sets related.R.Author appropriately.
func (o *Author) AddProposeBookLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProposeBookList) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `propose_book_list` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
				strmangle.WhereClause("`", "`", 0, proposeBookListPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &authorR{
			ProposeBookLists: related,
		}
	} else {
		o.R.ProposeBookLists = append(o.R.ProposeBookLists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &proposeBookListR{
				Author: o,
			}
		} else {
			rel.R.Author = o
		}
	}
	return nil
}

// SetProposeBookListsG removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's ProposeBookLists accordingly.
// Replaces o.R.ProposeBookLists with related.
// Sets related.R.Author's ProposeBookLists accordingly.
// Uses the global database handle.
func (o *Author) SetProposeBookListsG(ctx context.Context, insert bool, related ...*ProposeBookList) error {
	return o.SetProposeBookLists(ctx, boil.GetContextDB(), insert, related...)
}

// SetProposeBookLists removes all previously related items of the
// author replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Author's ProposeBookLists accordingly.
// Replaces o.R.ProposeBookLists with related.
// Sets related.R.Author's ProposeBookLists accordingly.
func (o *Author) SetProposeBookLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProposeBookList) error {
	query := "update `propose_book_list` set `author_id` = null where `author_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProposeBookLists {
			queries.SetScanner(&rel.AuthorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Author = nil
		}

		o.R.ProposeBookLists = nil
	}
	return o.AddProposeBookLists(ctx, exec, insert, related...)
}

// RemoveProposeBookListsG relationships from objects passed in.
// Removes related items from R.ProposeBookLists (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
// Uses the global database handle.
func (o *Author) RemoveProposeBookListsG(ctx context.Context, related ...*ProposeBookList) error {
	return o.RemoveProposeBookLists(ctx, boil.GetContextDB(), related...)
}

// RemoveProposeBookLists relationships from objects passed in.
// Removes related items from R.ProposeBookLists (uses pointer comparison, removal does not keep order)
// Sets related.R.Author.
func (o *Author) RemoveProposeBookLists(ctx context.Context, exec boil.ContextExecutor, related ...*ProposeBookList) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorID, nil)
		if rel.R != nil {
			rel.R.Author = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProposeBookLists {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProposeBookLists)
			if ln > 1 && i < ln-1 {
				o.R.ProposeBookLists[i] = o.R.ProposeBookLists[ln-1]
			}
			o.R.ProposeBookLists = o.R.ProposeBookLists[:ln-1]
			break
		}
	}

	return nil
}

// Authors retrieves all the records using an executor.
func Authors(mods ...qm.QueryMod) authorQuery {
	mods = append(mods, qm.From("`author`"))
	return authorQuery{NewQuery(mods...)}
}

// FindAuthorG retrieves a single record by ID.
func FindAuthorG(ctx context.Context, iD int, selectCols ...string) (*Author, error) {
	return FindAuthor(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Author, error) {
	authorObj := &Author{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `author` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from author")
	}

	return authorObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Author) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Author) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no author provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorInsertCacheMut.RLock()
	cache, cached := authorInsertCache[key]
	authorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorAllColumns,
			authorColumnsWithDefault,
			authorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorType, authorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorType, authorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `author` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `author` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `author` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into author")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authorMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for author")
	}

CacheNoHooks:
	if !cached {
		authorInsertCacheMut.Lock()
		authorInsertCache[key] = cache
		authorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Author record using the global executor.
// See Update for more documentation.
func (o *Author) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Author.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Author) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorUpdateCacheMut.RLock()
	cache, cached := authorUpdateCache[key]
	authorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorAllColumns,
			authorPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update author, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `author` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorType, authorMapping, append(wl, authorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update author row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for author")
	}

	if !cached {
		authorUpdateCacheMut.Lock()
		authorUpdateCache[key] = cache
		authorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for author")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for author")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `author` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in author slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all author")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Author) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLAuthorUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Author) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no author provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuthorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorUpsertCacheMut.RLock()
	cache, cached := authorUpsertCache[key]
	authorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorAllColumns,
			authorColumnsWithDefault,
			authorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			authorAllColumns,
			authorPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert author, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "author", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `author` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(authorType, authorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorType, authorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for author")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authorMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(authorType, authorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for author")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for author")
	}

CacheNoHooks:
	if !cached {
		authorUpsertCacheMut.Lock()
		authorUpsertCache[key] = cache
		authorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Author record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Author) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Author record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Author) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Author provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorPrimaryKeyMapping)
	sql := "DELETE FROM `author` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from author")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for author")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from author")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for author")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `author` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from author slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for author")
	}

	if len(authorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Author) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Author provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Author) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `author`.* FROM `author` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorSlice")
	}

	*o = slice

	return nil
}

// AuthorExistsG checks if the Author row exists.
func AuthorExistsG(ctx context.Context, iD int) (bool, error) {
	return AuthorExists(ctx, boil.GetContextDB(), iD)
}

// AuthorExists checks if the Author row exists.
func AuthorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `author` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if author exists")
	}

	return exists, nil
}
