// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookCategoryAssigns(t *testing.T) {
	t.Parallel()

	query := BookCategoryAssigns()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookCategoryAssignsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookCategoryAssignsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookCategoryAssigns().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookCategoryAssignsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookCategoryAssignSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookCategoryAssignsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookCategoryAssignExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BookCategoryAssign exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookCategoryAssignExists to return true, but got false.")
	}
}

func testBookCategoryAssignsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookCategoryAssignFound, err := FindBookCategoryAssign(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookCategoryAssignFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookCategoryAssignsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookCategoryAssigns().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookCategoryAssignsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookCategoryAssigns().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookCategoryAssignsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookCategoryAssignOne := &BookCategoryAssign{}
	bookCategoryAssignTwo := &BookCategoryAssign{}
	if err = randomize.Struct(seed, bookCategoryAssignOne, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}
	if err = randomize.Struct(seed, bookCategoryAssignTwo, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookCategoryAssignOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookCategoryAssignTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookCategoryAssigns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookCategoryAssignsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookCategoryAssignOne := &BookCategoryAssign{}
	bookCategoryAssignTwo := &BookCategoryAssign{}
	if err = randomize.Struct(seed, bookCategoryAssignOne, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}
	if err = randomize.Struct(seed, bookCategoryAssignTwo, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookCategoryAssignOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookCategoryAssignTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookCategoryAssignBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func bookCategoryAssignAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookCategoryAssign) error {
	*o = BookCategoryAssign{}
	return nil
}

func testBookCategoryAssignsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookCategoryAssign{}
	o := &BookCategoryAssign{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign object: %s", err)
	}

	AddBookCategoryAssignHook(boil.BeforeInsertHook, bookCategoryAssignBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignBeforeInsertHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.AfterInsertHook, bookCategoryAssignAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignAfterInsertHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.AfterSelectHook, bookCategoryAssignAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignAfterSelectHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.BeforeUpdateHook, bookCategoryAssignBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignBeforeUpdateHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.AfterUpdateHook, bookCategoryAssignAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignAfterUpdateHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.BeforeDeleteHook, bookCategoryAssignBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignBeforeDeleteHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.AfterDeleteHook, bookCategoryAssignAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignAfterDeleteHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.BeforeUpsertHook, bookCategoryAssignBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignBeforeUpsertHooks = []BookCategoryAssignHook{}

	AddBookCategoryAssignHook(boil.AfterUpsertHook, bookCategoryAssignAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookCategoryAssignAfterUpsertHooks = []BookCategoryAssignHook{}
}

func testBookCategoryAssignsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookCategoryAssignsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookCategoryAssignColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookCategoryAssignToOneBookCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookCategoryAssign
	var foreign BookCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookCategoryDBTypes, false, bookCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookCategoryAssignSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*BookCategoryAssign)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookCategoryAssignToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookCategoryAssign
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookCategoryAssignSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*BookCategoryAssign)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookCategoryAssignToOneSetOpBookCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookCategoryAssign
	var b, c BookCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookCategoryAssignDBTypes, false, strmangle.SetComplement(bookCategoryAssignPrimaryKeyColumns, bookCategoryAssignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookCategoryDBTypes, false, strmangle.SetComplement(bookCategoryPrimaryKeyColumns, bookCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookCategoryDBTypes, false, strmangle.SetComplement(bookCategoryPrimaryKeyColumns, bookCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BookCategory{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryBookCategoryAssigns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}
func testBookCategoryAssignToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookCategoryAssign
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookCategoryAssignDBTypes, false, strmangle.SetComplement(bookCategoryAssignPrimaryKeyColumns, bookCategoryAssignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookCategoryAssigns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID, x.ID)
		}
	}
}

func testBookCategoryAssignsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookCategoryAssignsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookCategoryAssignSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookCategoryAssignsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookCategoryAssigns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookCategoryAssignDBTypes = map[string]string{`ID`: `int`, `BookID`: `int`, `CategoryID`: `int`}
	_                         = bytes.MinRead
)

func testBookCategoryAssignsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookCategoryAssignPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookCategoryAssignColumns) == len(bookCategoryAssignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookCategoryAssignsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookCategoryAssignColumns) == len(bookCategoryAssignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookCategoryAssign{}
	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookCategoryAssignDBTypes, true, bookCategoryAssignPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookCategoryAssignColumns, bookCategoryAssignPrimaryKeyColumns) {
		fields = bookCategoryAssignColumns
	} else {
		fields = strmangle.SetComplement(
			bookCategoryAssignColumns,
			bookCategoryAssignPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookCategoryAssignSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookCategoryAssignsUpsert(t *testing.T) {
	t.Parallel()

	if len(bookCategoryAssignColumns) == len(bookCategoryAssignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBookCategoryAssignUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookCategoryAssign{}
	if err = randomize.Struct(seed, &o, bookCategoryAssignDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookCategoryAssign: %s", err)
	}

	count, err := BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookCategoryAssignDBTypes, false, bookCategoryAssignPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookCategoryAssign struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookCategoryAssign: %s", err)
	}

	count, err = BookCategoryAssigns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
