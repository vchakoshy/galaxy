// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProposeBookLists(t *testing.T) {
	t.Parallel()

	query := ProposeBookLists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProposeBookListsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProposeBookLists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProposeBookListSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProposeBookListExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProposeBookList exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProposeBookListExists to return true, but got false.")
	}
}

func testProposeBookListsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	proposeBookListFound, err := FindProposeBookList(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if proposeBookListFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProposeBookListsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProposeBookLists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProposeBookListsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProposeBookLists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProposeBookListsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	proposeBookListOne := &ProposeBookList{}
	proposeBookListTwo := &ProposeBookList{}
	if err = randomize.Struct(seed, proposeBookListOne, proposeBookListDBTypes, false, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}
	if err = randomize.Struct(seed, proposeBookListTwo, proposeBookListDBTypes, false, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = proposeBookListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = proposeBookListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProposeBookLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProposeBookListsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	proposeBookListOne := &ProposeBookList{}
	proposeBookListTwo := &ProposeBookList{}
	if err = randomize.Struct(seed, proposeBookListOne, proposeBookListDBTypes, false, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}
	if err = randomize.Struct(seed, proposeBookListTwo, proposeBookListDBTypes, false, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = proposeBookListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = proposeBookListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func proposeBookListBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func proposeBookListAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookList) error {
	*o = ProposeBookList{}
	return nil
}

func testProposeBookListsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProposeBookList{}
	o := &ProposeBookList{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProposeBookList object: %s", err)
	}

	AddProposeBookListHook(boil.BeforeInsertHook, proposeBookListBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListBeforeInsertHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.AfterInsertHook, proposeBookListAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListAfterInsertHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.AfterSelectHook, proposeBookListAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	proposeBookListAfterSelectHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.BeforeUpdateHook, proposeBookListBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	proposeBookListBeforeUpdateHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.AfterUpdateHook, proposeBookListAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	proposeBookListAfterUpdateHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.BeforeDeleteHook, proposeBookListBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	proposeBookListBeforeDeleteHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.AfterDeleteHook, proposeBookListAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	proposeBookListAfterDeleteHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.BeforeUpsertHook, proposeBookListBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListBeforeUpsertHooks = []ProposeBookListHook{}

	AddProposeBookListHook(boil.AfterUpsertHook, proposeBookListAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListAfterUpsertHooks = []ProposeBookListHook{}
}

func testProposeBookListsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProposeBookListsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(proposeBookListColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProposeBookListToManyProposeBookListItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b, c ProposeBookListItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ProposeBookListID, a.ID)
	queries.Assign(&c.ProposeBookListID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProposeBookListItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ProposeBookListID, b.ProposeBookListID) {
			bFound = true
		}
		if queries.Equal(v.ProposeBookListID, c.ProposeBookListID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProposeBookListSlice{&a}
	if err = a.L.LoadProposeBookListItems(ctx, tx, false, (*[]*ProposeBookList)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProposeBookListItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProposeBookListItems = nil
	if err = a.L.LoadProposeBookListItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProposeBookListItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProposeBookListToManyAddOpProposeBookListItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b, c, d, e ProposeBookListItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProposeBookListItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProposeBookListItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProposeBookListItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ProposeBookListID) {
			t.Error("foreign key was wrong value", a.ID, first.ProposeBookListID)
		}
		if !queries.Equal(a.ID, second.ProposeBookListID) {
			t.Error("foreign key was wrong value", a.ID, second.ProposeBookListID)
		}

		if first.R.ProposeBookList != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProposeBookList != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProposeBookListItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProposeBookListItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProposeBookListItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProposeBookListToManySetOpProposeBookListItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b, c, d, e ProposeBookListItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProposeBookListItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProposeBookListItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProposeBookListItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProposeBookListID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProposeBookListID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ProposeBookListID) {
		t.Error("foreign key was wrong value", a.ID, d.ProposeBookListID)
	}
	if !queries.Equal(a.ID, e.ProposeBookListID) {
		t.Error("foreign key was wrong value", a.ID, e.ProposeBookListID)
	}

	if b.R.ProposeBookList != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProposeBookList != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProposeBookList != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProposeBookList != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProposeBookListItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProposeBookListItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProposeBookListToManyRemoveOpProposeBookListItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b, c, d, e ProposeBookListItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProposeBookListItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProposeBookListItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProposeBookListItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProposeBookListID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProposeBookListID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProposeBookList != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProposeBookList != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProposeBookList != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProposeBookList != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProposeBookListItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProposeBookListItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProposeBookListItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProposeBookListToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProposeBookList
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProposeBookListSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*ProposeBookList)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProposeBookListToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProposeBookLists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testProposeBookListToOneRemoveOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookList
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProposeBookLists) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProposeBookListsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProposeBookListsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProposeBookListSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProposeBookListsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProposeBookLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	proposeBookListDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `SubTitle`: `varchar`, `Description`: `text`, `AuthorID`: `int`, `CoverImage`: `text`, `Thumbnail`: `text`, `Link`: `varchar`, `LinkTitle`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                      = bytes.MinRead
)

func testProposeBookListsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(proposeBookListPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(proposeBookListAllColumns) == len(proposeBookListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProposeBookListsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(proposeBookListAllColumns) == len(proposeBookListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookList{}
	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, proposeBookListDBTypes, true, proposeBookListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(proposeBookListAllColumns, proposeBookListPrimaryKeyColumns) {
		fields = proposeBookListAllColumns
	} else {
		fields = strmangle.SetComplement(
			proposeBookListAllColumns,
			proposeBookListPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProposeBookListSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProposeBookListsUpsert(t *testing.T) {
	t.Parallel()

	if len(proposeBookListAllColumns) == len(proposeBookListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProposeBookListUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProposeBookList{}
	if err = randomize.Struct(seed, &o, proposeBookListDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProposeBookList: %s", err)
	}

	count, err := ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, proposeBookListDBTypes, false, proposeBookListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProposeBookList: %s", err)
	}

	count, err = ProposeBookLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
