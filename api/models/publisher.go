// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Publisher is an object representing the database table.
type Publisher struct {
	ID                   int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID               null.Int          `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Title                string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug                 null.String       `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	PublisherType        null.String       `boil:"publisher_type" json:"publisher_type,omitempty" toml:"publisher_type" yaml:"publisher_type,omitempty"`
	Logo                 null.String       `boil:"logo" json:"logo,omitempty" toml:"logo" yaml:"logo,omitempty"`
	Cover                null.String       `boil:"cover" json:"cover,omitempty" toml:"cover" yaml:"cover,omitempty"`
	ContentProviderType  string            `boil:"content_provider_type" json:"content_provider_type" toml:"content_provider_type" yaml:"content_provider_type"`
	BookPriceRatio       null.Int8         `boil:"book_price_ratio" json:"book_price_ratio,omitempty" toml:"book_price_ratio" yaml:"book_price_ratio,omitempty"`
	BookPriceRatioTMP    null.Int          `boil:"book_price_ratio_tmp" json:"book_price_ratio_tmp,omitempty" toml:"book_price_ratio_tmp" yaml:"book_price_ratio_tmp,omitempty"`
	Comment              null.String       `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	SaleRate             types.NullDecimal `boil:"sale_rate" json:"sale_rate,omitempty" toml:"sale_rate" yaml:"sale_rate,omitempty"`
	SystematicDiscount   bool              `boil:"systematic_discount" json:"systematic_discount" toml:"systematic_discount" yaml:"systematic_discount"`
	RulesViolation       int8              `boil:"rules_violation" json:"rules_violation" toml:"rules_violation" yaml:"rules_violation"`
	PublisherMarketshare float32           `boil:"publisher_marketshare" json:"publisher_marketshare" toml:"publisher_marketshare" yaml:"publisher_marketshare"`
	FinanceShaba         null.String       `boil:"finance_shaba" json:"finance_shaba,omitempty" toml:"finance_shaba" yaml:"finance_shaba,omitempty"`
	FinanceBank          null.String       `boil:"finance_bank" json:"finance_bank,omitempty" toml:"finance_bank" yaml:"finance_bank,omitempty"`
	FinanceCode          null.String       `boil:"finance_code" json:"finance_code,omitempty" toml:"finance_code" yaml:"finance_code,omitempty"`
	FinanceName          null.String       `boil:"finance_name" json:"finance_name,omitempty" toml:"finance_name" yaml:"finance_name,omitempty"`
	FinanceTafsiliNumber int               `boil:"finance_tafsili_number" json:"finance_tafsili_number" toml:"finance_tafsili_number" yaml:"finance_tafsili_number"`

	R *publisherR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherColumns = struct {
	ID                   string
	UserID               string
	Title                string
	Slug                 string
	PublisherType        string
	Logo                 string
	Cover                string
	ContentProviderType  string
	BookPriceRatio       string
	BookPriceRatioTMP    string
	Comment              string
	SaleRate             string
	SystematicDiscount   string
	RulesViolation       string
	PublisherMarketshare string
	FinanceShaba         string
	FinanceBank          string
	FinanceCode          string
	FinanceName          string
	FinanceTafsiliNumber string
}{
	ID:                   "id",
	UserID:               "user_id",
	Title:                "title",
	Slug:                 "slug",
	PublisherType:        "publisher_type",
	Logo:                 "logo",
	Cover:                "cover",
	ContentProviderType:  "content_provider_type",
	BookPriceRatio:       "book_price_ratio",
	BookPriceRatioTMP:    "book_price_ratio_tmp",
	Comment:              "comment",
	SaleRate:             "sale_rate",
	SystematicDiscount:   "systematic_discount",
	RulesViolation:       "rules_violation",
	PublisherMarketshare: "publisher_marketshare",
	FinanceShaba:         "finance_shaba",
	FinanceBank:          "finance_bank",
	FinanceCode:          "finance_code",
	FinanceName:          "finance_name",
	FinanceTafsiliNumber: "finance_tafsili_number",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PublisherWhere = struct {
	ID                   whereHelperint
	UserID               whereHelpernull_Int
	Title                whereHelperstring
	Slug                 whereHelpernull_String
	PublisherType        whereHelpernull_String
	Logo                 whereHelpernull_String
	Cover                whereHelpernull_String
	ContentProviderType  whereHelperstring
	BookPriceRatio       whereHelpernull_Int8
	BookPriceRatioTMP    whereHelpernull_Int
	Comment              whereHelpernull_String
	SaleRate             whereHelpertypes_NullDecimal
	SystematicDiscount   whereHelperbool
	RulesViolation       whereHelperint8
	PublisherMarketshare whereHelperfloat32
	FinanceShaba         whereHelpernull_String
	FinanceBank          whereHelpernull_String
	FinanceCode          whereHelpernull_String
	FinanceName          whereHelpernull_String
	FinanceTafsiliNumber whereHelperint
}{
	ID:                   whereHelperint{field: `id`},
	UserID:               whereHelpernull_Int{field: `user_id`},
	Title:                whereHelperstring{field: `title`},
	Slug:                 whereHelpernull_String{field: `slug`},
	PublisherType:        whereHelpernull_String{field: `publisher_type`},
	Logo:                 whereHelpernull_String{field: `logo`},
	Cover:                whereHelpernull_String{field: `cover`},
	ContentProviderType:  whereHelperstring{field: `content_provider_type`},
	BookPriceRatio:       whereHelpernull_Int8{field: `book_price_ratio`},
	BookPriceRatioTMP:    whereHelpernull_Int{field: `book_price_ratio_tmp`},
	Comment:              whereHelpernull_String{field: `comment`},
	SaleRate:             whereHelpertypes_NullDecimal{field: `sale_rate`},
	SystematicDiscount:   whereHelperbool{field: `systematic_discount`},
	RulesViolation:       whereHelperint8{field: `rules_violation`},
	PublisherMarketshare: whereHelperfloat32{field: `publisher_marketshare`},
	FinanceShaba:         whereHelpernull_String{field: `finance_shaba`},
	FinanceBank:          whereHelpernull_String{field: `finance_bank`},
	FinanceCode:          whereHelpernull_String{field: `finance_code`},
	FinanceName:          whereHelpernull_String{field: `finance_name`},
	FinanceTafsiliNumber: whereHelperint{field: `finance_tafsili_number`},
}

// PublisherRels is where relationship names are stored.
var PublisherRels = struct {
	Books                  string
	OriginalPublisherBooks string
}{
	Books:                  "Books",
	OriginalPublisherBooks: "OriginalPublisherBooks",
}

// publisherR is where relationships are stored.
type publisherR struct {
	Books                  BookSlice
	OriginalPublisherBooks BookSlice
}

// NewStruct creates a new relationship struct
func (*publisherR) NewStruct() *publisherR {
	return &publisherR{}
}

// publisherL is where Load methods for each relationship are stored.
type publisherL struct{}

var (
	publisherColumns               = []string{"id", "user_id", "title", "slug", "publisher_type", "logo", "cover", "content_provider_type", "book_price_ratio", "book_price_ratio_tmp", "comment", "sale_rate", "systematic_discount", "rules_violation", "publisher_marketshare", "finance_shaba", "finance_bank", "finance_code", "finance_name", "finance_tafsili_number"}
	publisherColumnsWithoutDefault = []string{"user_id", "title", "slug", "publisher_type", "logo", "cover", "book_price_ratio", "book_price_ratio_tmp", "comment", "sale_rate", "finance_shaba", "finance_bank", "finance_code", "finance_name"}
	publisherColumnsWithDefault    = []string{"id", "content_provider_type", "systematic_discount", "rules_violation", "publisher_marketshare", "finance_tafsili_number"}
	publisherPrimaryKeyColumns     = []string{"id"}
)

type (
	// PublisherSlice is an alias for a slice of pointers to Publisher.
	// This should generally be used opposed to []Publisher.
	PublisherSlice []*Publisher
	// PublisherHook is the signature for custom Publisher hook methods
	PublisherHook func(context.Context, boil.ContextExecutor, *Publisher) error

	publisherQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherType                 = reflect.TypeOf(&Publisher{})
	publisherMapping              = queries.MakeStructMapping(publisherType)
	publisherPrimaryKeyMapping, _ = queries.BindMapping(publisherType, publisherMapping, publisherPrimaryKeyColumns)
	publisherInsertCacheMut       sync.RWMutex
	publisherInsertCache          = make(map[string]insertCache)
	publisherUpdateCacheMut       sync.RWMutex
	publisherUpdateCache          = make(map[string]updateCache)
	publisherUpsertCacheMut       sync.RWMutex
	publisherUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherBeforeInsertHooks []PublisherHook
var publisherBeforeUpdateHooks []PublisherHook
var publisherBeforeDeleteHooks []PublisherHook
var publisherBeforeUpsertHooks []PublisherHook

var publisherAfterInsertHooks []PublisherHook
var publisherAfterSelectHooks []PublisherHook
var publisherAfterUpdateHooks []PublisherHook
var publisherAfterDeleteHooks []PublisherHook
var publisherAfterUpsertHooks []PublisherHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Publisher) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Publisher) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Publisher) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Publisher) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Publisher) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Publisher) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Publisher) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Publisher) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Publisher) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherHook registers your hook function for all future operations.
func AddPublisherHook(hookPoint boil.HookPoint, publisherHook PublisherHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publisherBeforeInsertHooks = append(publisherBeforeInsertHooks, publisherHook)
	case boil.BeforeUpdateHook:
		publisherBeforeUpdateHooks = append(publisherBeforeUpdateHooks, publisherHook)
	case boil.BeforeDeleteHook:
		publisherBeforeDeleteHooks = append(publisherBeforeDeleteHooks, publisherHook)
	case boil.BeforeUpsertHook:
		publisherBeforeUpsertHooks = append(publisherBeforeUpsertHooks, publisherHook)
	case boil.AfterInsertHook:
		publisherAfterInsertHooks = append(publisherAfterInsertHooks, publisherHook)
	case boil.AfterSelectHook:
		publisherAfterSelectHooks = append(publisherAfterSelectHooks, publisherHook)
	case boil.AfterUpdateHook:
		publisherAfterUpdateHooks = append(publisherAfterUpdateHooks, publisherHook)
	case boil.AfterDeleteHook:
		publisherAfterDeleteHooks = append(publisherAfterDeleteHooks, publisherHook)
	case boil.AfterUpsertHook:
		publisherAfterUpsertHooks = append(publisherAfterUpsertHooks, publisherHook)
	}
}

// OneG returns a single publisher record from the query using the global executor.
func (q publisherQuery) OneG(ctx context.Context) (*Publisher, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single publisher record from the query.
func (q publisherQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Publisher, error) {
	o := &Publisher{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Publisher records from the query using the global executor.
func (q publisherQuery) AllG(ctx context.Context) (PublisherSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Publisher records from the query.
func (q publisherQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherSlice, error) {
	var o []*Publisher

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Publisher slice")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Publisher records in the query, and panics on error.
func (q publisherQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Publisher records in the query.
func (q publisherQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q publisherQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q publisherQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher exists")
	}

	return count > 0, nil
}

// Books retrieves all the book's Books with an executor.
func (o *Publisher) Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`publisher_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// OriginalPublisherBooks retrieves all the book's Books with an executor via original_publisher_id column.
func (o *Publisher) OriginalPublisherBooks(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`book`.`original_publisher_id`=?", o.ID),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`book`.*"})
	}

	return query
}

// LoadBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		object = maybePublisher.(*Publisher)
	} else {
		slice = *maybePublisher.(*[]*Publisher)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`publisher_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Publisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PublisherID) {
				local.R.Books = append(local.R.Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Publisher = local
				break
			}
		}
	}

	return nil
}

// LoadOriginalPublisherBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadOriginalPublisherBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		object = maybePublisher.(*Publisher)
	} else {
		slice = *maybePublisher.(*[]*Publisher)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`original_publisher_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginalPublisherBooks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.OriginalPublisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OriginalPublisherID) {
				local.R.OriginalPublisherBooks = append(local.R.OriginalPublisherBooks, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.OriginalPublisher = local
				break
			}
		}
	}

	return nil
}

// AddBooksG adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.Publisher appropriately.
// Uses the global database handle.
func (o *Publisher) AddBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddBooks(ctx, boil.GetContextDB(), insert, related...)
}

// AddBooks adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.Publisher appropriately.
func (o *Publisher) AddBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PublisherID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"publisher_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PublisherID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			Books: related,
		}
	} else {
		o.R.Books = append(o.R.Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// SetBooksG removes all previously related items of the
// publisher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.Publisher's Books accordingly.
// Uses the global database handle.
func (o *Publisher) SetBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetBooks(ctx, boil.GetContextDB(), insert, related...)
}

// SetBooks removes all previously related items of the
// publisher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.Publisher's Books accordingly.
func (o *Publisher) SetBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `publisher_id` = null where `publisher_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Books {
			queries.SetScanner(&rel.PublisherID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Publisher = nil
		}

		o.R.Books = nil
	}
	return o.AddBooks(ctx, exec, insert, related...)
}

// RemoveBooksG relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
// Uses the global database handle.
func (o *Publisher) RemoveBooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveBooks(ctx, boil.GetContextDB(), related...)
}

// RemoveBooks relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
func (o *Publisher) RemoveBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PublisherID, nil)
		if rel.R != nil {
			rel.R.Publisher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("publisher_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Books)
			if ln > 1 && i < ln-1 {
				o.R.Books[i] = o.R.Books[ln-1]
			}
			o.R.Books = o.R.Books[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginalPublisherBooksG adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.OriginalPublisherBooks.
// Sets related.R.OriginalPublisher appropriately.
// Uses the global database handle.
func (o *Publisher) AddOriginalPublisherBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddOriginalPublisherBooks(ctx, boil.GetContextDB(), insert, related...)
}

// AddOriginalPublisherBooks adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.OriginalPublisherBooks.
// Sets related.R.OriginalPublisher appropriately.
func (o *Publisher) AddOriginalPublisherBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OriginalPublisherID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `book` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"original_publisher_id"}),
				strmangle.WhereClause("`", "`", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OriginalPublisherID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			OriginalPublisherBooks: related,
		}
	} else {
		o.R.OriginalPublisherBooks = append(o.R.OriginalPublisherBooks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				OriginalPublisher: o,
			}
		} else {
			rel.R.OriginalPublisher = o
		}
	}
	return nil
}

// SetOriginalPublisherBooksG removes all previously related items of the
// publisher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginalPublisher's OriginalPublisherBooks accordingly.
// Replaces o.R.OriginalPublisherBooks with related.
// Sets related.R.OriginalPublisher's OriginalPublisherBooks accordingly.
// Uses the global database handle.
func (o *Publisher) SetOriginalPublisherBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetOriginalPublisherBooks(ctx, boil.GetContextDB(), insert, related...)
}

// SetOriginalPublisherBooks removes all previously related items of the
// publisher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginalPublisher's OriginalPublisherBooks accordingly.
// Replaces o.R.OriginalPublisherBooks with related.
// Sets related.R.OriginalPublisher's OriginalPublisherBooks accordingly.
func (o *Publisher) SetOriginalPublisherBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update `book` set `original_publisher_id` = null where `original_publisher_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginalPublisherBooks {
			queries.SetScanner(&rel.OriginalPublisherID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginalPublisher = nil
		}

		o.R.OriginalPublisherBooks = nil
	}
	return o.AddOriginalPublisherBooks(ctx, exec, insert, related...)
}

// RemoveOriginalPublisherBooksG relationships from objects passed in.
// Removes related items from R.OriginalPublisherBooks (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginalPublisher.
// Uses the global database handle.
func (o *Publisher) RemoveOriginalPublisherBooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveOriginalPublisherBooks(ctx, boil.GetContextDB(), related...)
}

// RemoveOriginalPublisherBooks relationships from objects passed in.
// Removes related items from R.OriginalPublisherBooks (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginalPublisher.
func (o *Publisher) RemoveOriginalPublisherBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OriginalPublisherID, nil)
		if rel.R != nil {
			rel.R.OriginalPublisher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("original_publisher_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginalPublisherBooks {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginalPublisherBooks)
			if ln > 1 && i < ln-1 {
				o.R.OriginalPublisherBooks[i] = o.R.OriginalPublisherBooks[ln-1]
			}
			o.R.OriginalPublisherBooks = o.R.OriginalPublisherBooks[:ln-1]
			break
		}
	}

	return nil
}

// Publishers retrieves all the records using an executor.
func Publishers(mods ...qm.QueryMod) publisherQuery {
	mods = append(mods, qm.From("`publisher`"))
	return publisherQuery{NewQuery(mods...)}
}

// FindPublisherG retrieves a single record by ID.
func FindPublisherG(ctx context.Context, iD int, selectCols ...string) (*Publisher, error) {
	return FindPublisher(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPublisher retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisher(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Publisher, error) {
	publisherObj := &Publisher{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `publisher` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publisherObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher")
	}

	return publisherObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Publisher) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Publisher) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherInsertCacheMut.RLock()
	cache, cached := publisherInsertCache[key]
	publisherInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherColumns,
			publisherColumnsWithDefault,
			publisherColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherType, publisherMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `publisher` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `publisher` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `publisher` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, publisherPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == publisherMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for publisher")
	}

CacheNoHooks:
	if !cached {
		publisherInsertCacheMut.Lock()
		publisherInsertCache[key] = cache
		publisherInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Publisher record using the global executor.
// See Update for more documentation.
func (o *Publisher) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Publisher.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Publisher) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherUpdateCacheMut.RLock()
	cache, cached := publisherUpdateCache[key]
	publisherUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherColumns,
			publisherPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `publisher` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, publisherPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, append(wl, publisherPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher")
	}

	if !cached {
		publisherUpdateCacheMut.Lock()
		publisherUpdateCache[key] = cache
		publisherUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q publisherQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PublisherSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `publisher` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisher")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Publisher) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLPublisherUniqueColumns = []string{
	"id",
	"slug",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Publisher) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPublisherUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherUpsertCacheMut.RLock()
	cache, cached := publisherUpsertCache[key]
	publisherUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publisherColumns,
			publisherColumnsWithDefault,
			publisherColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publisherColumns,
			publisherPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert publisher, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "publisher", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `publisher` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherType, publisherMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for publisher")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == publisherMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(publisherType, publisherMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for publisher")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for publisher")
	}

CacheNoHooks:
	if !cached {
		publisherUpsertCacheMut.Lock()
		publisherUpsertCache[key] = cache
		publisherUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Publisher record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Publisher) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Publisher record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Publisher) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Publisher provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherPrimaryKeyMapping)
	sql := "DELETE FROM `publisher` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PublisherSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Publisher slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `publisher` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher")
	}

	if len(publisherAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Publisher) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Publisher provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Publisher) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisher(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PublisherSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `publisher`.* FROM `publisher` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherSlice")
	}

	*o = slice

	return nil
}

// PublisherExistsG checks if the Publisher row exists.
func PublisherExistsG(ctx context.Context, iD int) (bool, error) {
	return PublisherExists(ctx, boil.GetContextDB(), iD)
}

// PublisherExists checks if the Publisher row exists.
func PublisherExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `publisher` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher exists")
	}

	return exists, nil
}
