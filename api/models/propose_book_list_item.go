// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProposeBookListItem is an object representing the database table.
type ProposeBookListItem struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title             null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	BookID            int         `boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	Sort              int         `boil:"sort" json:"sort" toml:"sort" yaml:"sort"`
	ProposeBookListID null.Int    `boil:"propose_book_list_id" json:"propose_book_list_id,omitempty" toml:"propose_book_list_id" yaml:"propose_book_list_id,omitempty"`

	R *proposeBookListItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L proposeBookListItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProposeBookListItemColumns = struct {
	ID                string
	Title             string
	Description       string
	BookID            string
	Sort              string
	ProposeBookListID string
}{
	ID:                "id",
	Title:             "title",
	Description:       "description",
	BookID:            "book_id",
	Sort:              "sort",
	ProposeBookListID: "propose_book_list_id",
}

// Generated where

var ProposeBookListItemWhere = struct {
	ID                whereHelperint
	Title             whereHelpernull_String
	Description       whereHelpernull_String
	BookID            whereHelperint
	Sort              whereHelperint
	ProposeBookListID whereHelpernull_Int
}{
	ID:                whereHelperint{field: "`propose_book_list_item`.`id`"},
	Title:             whereHelpernull_String{field: "`propose_book_list_item`.`title`"},
	Description:       whereHelpernull_String{field: "`propose_book_list_item`.`description`"},
	BookID:            whereHelperint{field: "`propose_book_list_item`.`book_id`"},
	Sort:              whereHelperint{field: "`propose_book_list_item`.`sort`"},
	ProposeBookListID: whereHelpernull_Int{field: "`propose_book_list_item`.`propose_book_list_id`"},
}

// ProposeBookListItemRels is where relationship names are stored.
var ProposeBookListItemRels = struct {
	Book            string
	ProposeBookList string
}{
	Book:            "Book",
	ProposeBookList: "ProposeBookList",
}

// proposeBookListItemR is where relationships are stored.
type proposeBookListItemR struct {
	Book            *Book
	ProposeBookList *ProposeBookList
}

// NewStruct creates a new relationship struct
func (*proposeBookListItemR) NewStruct() *proposeBookListItemR {
	return &proposeBookListItemR{}
}

// proposeBookListItemL is where Load methods for each relationship are stored.
type proposeBookListItemL struct{}

var (
	proposeBookListItemAllColumns            = []string{"id", "title", "description", "book_id", "sort", "propose_book_list_id"}
	proposeBookListItemColumnsWithoutDefault = []string{"title", "description", "book_id", "propose_book_list_id"}
	proposeBookListItemColumnsWithDefault    = []string{"id", "sort"}
	proposeBookListItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProposeBookListItemSlice is an alias for a slice of pointers to ProposeBookListItem.
	// This should generally be used opposed to []ProposeBookListItem.
	ProposeBookListItemSlice []*ProposeBookListItem
	// ProposeBookListItemHook is the signature for custom ProposeBookListItem hook methods
	ProposeBookListItemHook func(context.Context, boil.ContextExecutor, *ProposeBookListItem) error

	proposeBookListItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	proposeBookListItemType                 = reflect.TypeOf(&ProposeBookListItem{})
	proposeBookListItemMapping              = queries.MakeStructMapping(proposeBookListItemType)
	proposeBookListItemPrimaryKeyMapping, _ = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, proposeBookListItemPrimaryKeyColumns)
	proposeBookListItemInsertCacheMut       sync.RWMutex
	proposeBookListItemInsertCache          = make(map[string]insertCache)
	proposeBookListItemUpdateCacheMut       sync.RWMutex
	proposeBookListItemUpdateCache          = make(map[string]updateCache)
	proposeBookListItemUpsertCacheMut       sync.RWMutex
	proposeBookListItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var proposeBookListItemBeforeInsertHooks []ProposeBookListItemHook
var proposeBookListItemBeforeUpdateHooks []ProposeBookListItemHook
var proposeBookListItemBeforeDeleteHooks []ProposeBookListItemHook
var proposeBookListItemBeforeUpsertHooks []ProposeBookListItemHook

var proposeBookListItemAfterInsertHooks []ProposeBookListItemHook
var proposeBookListItemAfterSelectHooks []ProposeBookListItemHook
var proposeBookListItemAfterUpdateHooks []ProposeBookListItemHook
var proposeBookListItemAfterDeleteHooks []ProposeBookListItemHook
var proposeBookListItemAfterUpsertHooks []ProposeBookListItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProposeBookListItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProposeBookListItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProposeBookListItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProposeBookListItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProposeBookListItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProposeBookListItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProposeBookListItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProposeBookListItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProposeBookListItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProposeBookListItemHook registers your hook function for all future operations.
func AddProposeBookListItemHook(hookPoint boil.HookPoint, proposeBookListItemHook ProposeBookListItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		proposeBookListItemBeforeInsertHooks = append(proposeBookListItemBeforeInsertHooks, proposeBookListItemHook)
	case boil.BeforeUpdateHook:
		proposeBookListItemBeforeUpdateHooks = append(proposeBookListItemBeforeUpdateHooks, proposeBookListItemHook)
	case boil.BeforeDeleteHook:
		proposeBookListItemBeforeDeleteHooks = append(proposeBookListItemBeforeDeleteHooks, proposeBookListItemHook)
	case boil.BeforeUpsertHook:
		proposeBookListItemBeforeUpsertHooks = append(proposeBookListItemBeforeUpsertHooks, proposeBookListItemHook)
	case boil.AfterInsertHook:
		proposeBookListItemAfterInsertHooks = append(proposeBookListItemAfterInsertHooks, proposeBookListItemHook)
	case boil.AfterSelectHook:
		proposeBookListItemAfterSelectHooks = append(proposeBookListItemAfterSelectHooks, proposeBookListItemHook)
	case boil.AfterUpdateHook:
		proposeBookListItemAfterUpdateHooks = append(proposeBookListItemAfterUpdateHooks, proposeBookListItemHook)
	case boil.AfterDeleteHook:
		proposeBookListItemAfterDeleteHooks = append(proposeBookListItemAfterDeleteHooks, proposeBookListItemHook)
	case boil.AfterUpsertHook:
		proposeBookListItemAfterUpsertHooks = append(proposeBookListItemAfterUpsertHooks, proposeBookListItemHook)
	}
}

// OneG returns a single proposeBookListItem record from the query using the global executor.
func (q proposeBookListItemQuery) OneG(ctx context.Context) (*ProposeBookListItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single proposeBookListItem record from the query.
func (q proposeBookListItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProposeBookListItem, error) {
	o := &ProposeBookListItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for propose_book_list_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProposeBookListItem records from the query using the global executor.
func (q proposeBookListItemQuery) AllG(ctx context.Context) (ProposeBookListItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProposeBookListItem records from the query.
func (q proposeBookListItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProposeBookListItemSlice, error) {
	var o []*ProposeBookListItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProposeBookListItem slice")
	}

	if len(proposeBookListItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProposeBookListItem records in the query, and panics on error.
func (q proposeBookListItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProposeBookListItem records in the query.
func (q proposeBookListItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count propose_book_list_item rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q proposeBookListItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q proposeBookListItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if propose_book_list_item exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *ProposeBookListItem) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	return query
}

// ProposeBookList pointed to by the foreign key.
func (o *ProposeBookListItem) ProposeBookList(mods ...qm.QueryMod) proposeBookListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProposeBookListID),
	}

	queryMods = append(queryMods, mods...)

	query := ProposeBookLists(queryMods...)
	queries.SetFrom(query.Query, "`propose_book_list`")

	return query
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (proposeBookListItemL) LoadBook(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProposeBookListItem interface{}, mods queries.Applicator) error {
	var slice []*ProposeBookListItem
	var object *ProposeBookListItem

	if singular {
		object = maybeProposeBookListItem.(*ProposeBookListItem)
	} else {
		slice = *maybeProposeBookListItem.(*[]*ProposeBookListItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proposeBookListItemR{}
		}
		args = append(args, object.BookID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proposeBookListItemR{}
			}

			for _, a := range args {
				if a == obj.BookID {
					continue Outer
				}
			}

			args = append(args, obj.BookID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(proposeBookListItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.ProposeBookListItems = append(foreign.R.ProposeBookListItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookID == foreign.ID {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.ProposeBookListItems = append(foreign.R.ProposeBookListItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProposeBookList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (proposeBookListItemL) LoadProposeBookList(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProposeBookListItem interface{}, mods queries.Applicator) error {
	var slice []*ProposeBookListItem
	var object *ProposeBookListItem

	if singular {
		object = maybeProposeBookListItem.(*ProposeBookListItem)
	} else {
		slice = *maybeProposeBookListItem.(*[]*ProposeBookListItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proposeBookListItemR{}
		}
		if !queries.IsNil(object.ProposeBookListID) {
			args = append(args, object.ProposeBookListID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proposeBookListItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProposeBookListID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProposeBookListID) {
				args = append(args, obj.ProposeBookListID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`propose_book_list`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProposeBookList")
	}

	var resultSlice []*ProposeBookList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProposeBookList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for propose_book_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for propose_book_list")
	}

	if len(proposeBookListItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProposeBookList = foreign
		if foreign.R == nil {
			foreign.R = &proposeBookListR{}
		}
		foreign.R.ProposeBookListItems = append(foreign.R.ProposeBookListItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProposeBookListID, foreign.ID) {
				local.R.ProposeBookList = foreign
				if foreign.R == nil {
					foreign.R = &proposeBookListR{}
				}
				foreign.R.ProposeBookListItems = append(foreign.R.ProposeBookListItems, local)
				break
			}
		}
	}

	return nil
}

// SetBookG of the proposeBookListItem to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.ProposeBookListItems.
// Uses the global database handle.
func (o *ProposeBookListItem) SetBookG(ctx context.Context, insert bool, related *Book) error {
	return o.SetBook(ctx, boil.GetContextDB(), insert, related)
}

// SetBook of the proposeBookListItem to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.ProposeBookListItems.
func (o *ProposeBookListItem) SetBook(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `propose_book_list_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"book_id"}),
		strmangle.WhereClause("`", "`", 0, proposeBookListItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookID = related.ID
	if o.R == nil {
		o.R = &proposeBookListItemR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			ProposeBookListItems: ProposeBookListItemSlice{o},
		}
	} else {
		related.R.ProposeBookListItems = append(related.R.ProposeBookListItems, o)
	}

	return nil
}

// SetProposeBookListG of the proposeBookListItem to the related item.
// Sets o.R.ProposeBookList to related.
// Adds o to related.R.ProposeBookListItems.
// Uses the global database handle.
func (o *ProposeBookListItem) SetProposeBookListG(ctx context.Context, insert bool, related *ProposeBookList) error {
	return o.SetProposeBookList(ctx, boil.GetContextDB(), insert, related)
}

// SetProposeBookList of the proposeBookListItem to the related item.
// Sets o.R.ProposeBookList to related.
// Adds o to related.R.ProposeBookListItems.
func (o *ProposeBookListItem) SetProposeBookList(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProposeBookList) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `propose_book_list_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"propose_book_list_id"}),
		strmangle.WhereClause("`", "`", 0, proposeBookListItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProposeBookListID, related.ID)
	if o.R == nil {
		o.R = &proposeBookListItemR{
			ProposeBookList: related,
		}
	} else {
		o.R.ProposeBookList = related
	}

	if related.R == nil {
		related.R = &proposeBookListR{
			ProposeBookListItems: ProposeBookListItemSlice{o},
		}
	} else {
		related.R.ProposeBookListItems = append(related.R.ProposeBookListItems, o)
	}

	return nil
}

// RemoveProposeBookListG relationship.
// Sets o.R.ProposeBookList to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ProposeBookListItem) RemoveProposeBookListG(ctx context.Context, related *ProposeBookList) error {
	return o.RemoveProposeBookList(ctx, boil.GetContextDB(), related)
}

// RemoveProposeBookList relationship.
// Sets o.R.ProposeBookList to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProposeBookListItem) RemoveProposeBookList(ctx context.Context, exec boil.ContextExecutor, related *ProposeBookList) error {
	var err error

	queries.SetScanner(&o.ProposeBookListID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("propose_book_list_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ProposeBookList = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProposeBookListItems {
		if queries.Equal(o.ProposeBookListID, ri.ProposeBookListID) {
			continue
		}

		ln := len(related.R.ProposeBookListItems)
		if ln > 1 && i < ln-1 {
			related.R.ProposeBookListItems[i] = related.R.ProposeBookListItems[ln-1]
		}
		related.R.ProposeBookListItems = related.R.ProposeBookListItems[:ln-1]
		break
	}
	return nil
}

// ProposeBookListItems retrieves all the records using an executor.
func ProposeBookListItems(mods ...qm.QueryMod) proposeBookListItemQuery {
	mods = append(mods, qm.From("`propose_book_list_item`"))
	return proposeBookListItemQuery{NewQuery(mods...)}
}

// FindProposeBookListItemG retrieves a single record by ID.
func FindProposeBookListItemG(ctx context.Context, iD int, selectCols ...string) (*ProposeBookListItem, error) {
	return FindProposeBookListItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProposeBookListItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProposeBookListItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProposeBookListItem, error) {
	proposeBookListItemObj := &ProposeBookListItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `propose_book_list_item` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, proposeBookListItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from propose_book_list_item")
	}

	return proposeBookListItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProposeBookListItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProposeBookListItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no propose_book_list_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proposeBookListItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	proposeBookListItemInsertCacheMut.RLock()
	cache, cached := proposeBookListItemInsertCache[key]
	proposeBookListItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			proposeBookListItemAllColumns,
			proposeBookListItemColumnsWithDefault,
			proposeBookListItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `propose_book_list_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `propose_book_list_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `propose_book_list_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, proposeBookListItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into propose_book_list_item")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == proposeBookListItemMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for propose_book_list_item")
	}

CacheNoHooks:
	if !cached {
		proposeBookListItemInsertCacheMut.Lock()
		proposeBookListItemInsertCache[key] = cache
		proposeBookListItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProposeBookListItem record using the global executor.
// See Update for more documentation.
func (o *ProposeBookListItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProposeBookListItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProposeBookListItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	proposeBookListItemUpdateCacheMut.RLock()
	cache, cached := proposeBookListItemUpdateCache[key]
	proposeBookListItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			proposeBookListItemAllColumns,
			proposeBookListItemPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update propose_book_list_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `propose_book_list_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, proposeBookListItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, append(wl, proposeBookListItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update propose_book_list_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for propose_book_list_item")
	}

	if !cached {
		proposeBookListItemUpdateCacheMut.Lock()
		proposeBookListItemUpdateCache[key] = cache
		proposeBookListItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q proposeBookListItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q proposeBookListItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for propose_book_list_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for propose_book_list_item")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProposeBookListItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProposeBookListItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `propose_book_list_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in proposeBookListItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all proposeBookListItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProposeBookListItem) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLProposeBookListItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProposeBookListItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no propose_book_list_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proposeBookListItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProposeBookListItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	proposeBookListItemUpsertCacheMut.RLock()
	cache, cached := proposeBookListItemUpsertCache[key]
	proposeBookListItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			proposeBookListItemAllColumns,
			proposeBookListItemColumnsWithDefault,
			proposeBookListItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			proposeBookListItemAllColumns,
			proposeBookListItemPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert propose_book_list_item, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "propose_book_list_item", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `propose_book_list_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for propose_book_list_item")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == proposeBookListItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(proposeBookListItemType, proposeBookListItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for propose_book_list_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for propose_book_list_item")
	}

CacheNoHooks:
	if !cached {
		proposeBookListItemUpsertCacheMut.Lock()
		proposeBookListItemUpsertCache[key] = cache
		proposeBookListItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProposeBookListItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProposeBookListItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProposeBookListItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProposeBookListItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProposeBookListItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), proposeBookListItemPrimaryKeyMapping)
	sql := "DELETE FROM `propose_book_list_item` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from propose_book_list_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for propose_book_list_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q proposeBookListItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no proposeBookListItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from propose_book_list_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for propose_book_list_item")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProposeBookListItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProposeBookListItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(proposeBookListItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `propose_book_list_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proposeBookListItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for propose_book_list_item")
	}

	if len(proposeBookListItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProposeBookListItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ProposeBookListItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProposeBookListItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProposeBookListItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProposeBookListItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ProposeBookListItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProposeBookListItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProposeBookListItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `propose_book_list_item`.* FROM `propose_book_list_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProposeBookListItemSlice")
	}

	*o = slice

	return nil
}

// ProposeBookListItemExistsG checks if the ProposeBookListItem row exists.
func ProposeBookListItemExistsG(ctx context.Context, iD int) (bool, error) {
	return ProposeBookListItemExists(ctx, boil.GetContextDB(), iD)
}

// ProposeBookListItemExists checks if the ProposeBookListItem row exists.
func ProposeBookListItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `propose_book_list_item` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if propose_book_list_item exists")
	}

	return exists, nil
}
