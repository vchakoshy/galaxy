// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFlexComponents(t *testing.T) {
	t.Parallel()

	query := FlexComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFlexComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FlexComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FlexComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FlexComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FlexComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FlexComponentExists to return true, but got false.")
	}
}

func testFlexComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	flexComponentFound, err := FindFlexComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if flexComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFlexComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FlexComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFlexComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FlexComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFlexComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	flexComponentOne := &FlexComponent{}
	flexComponentTwo := &FlexComponent{}
	if err = randomize.Struct(seed, flexComponentOne, flexComponentDBTypes, false, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, flexComponentTwo, flexComponentDBTypes, false, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = flexComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = flexComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FlexComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFlexComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	flexComponentOne := &FlexComponent{}
	flexComponentTwo := &FlexComponent{}
	if err = randomize.Struct(seed, flexComponentOne, flexComponentDBTypes, false, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, flexComponentTwo, flexComponentDBTypes, false, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = flexComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = flexComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func flexComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func flexComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexComponent) error {
	*o = FlexComponent{}
	return nil
}

func testFlexComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FlexComponent{}
	o := &FlexComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, flexComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FlexComponent object: %s", err)
	}

	AddFlexComponentHook(boil.BeforeInsertHook, flexComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	flexComponentBeforeInsertHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.AfterInsertHook, flexComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	flexComponentAfterInsertHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.AfterSelectHook, flexComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	flexComponentAfterSelectHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.BeforeUpdateHook, flexComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	flexComponentBeforeUpdateHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.AfterUpdateHook, flexComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	flexComponentAfterUpdateHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.BeforeDeleteHook, flexComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	flexComponentBeforeDeleteHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.AfterDeleteHook, flexComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	flexComponentAfterDeleteHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.BeforeUpsertHook, flexComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	flexComponentBeforeUpsertHooks = []FlexComponentHook{}

	AddFlexComponentHook(boil.AfterUpsertHook, flexComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	flexComponentAfterUpsertHooks = []FlexComponentHook{}
}

func testFlexComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFlexComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(flexComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFlexComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFlexComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FlexComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFlexComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FlexComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	flexComponentDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `Type`: `varchar`, `Class`: `varchar`, `Fields`: `text`, `FormSchema`: `text`, `CreatedAt`: `datetime`, `Image`: `longtext`, `Mappings`: `text`, `ViewType`: `enum('SINGLE','MULTIPLE')`}
	_                    = bytes.MinRead
)

func testFlexComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(flexComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(flexComponentColumns) == len(flexComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFlexComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(flexComponentColumns) == len(flexComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FlexComponent{}
	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, flexComponentDBTypes, true, flexComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(flexComponentColumns, flexComponentPrimaryKeyColumns) {
		fields = flexComponentColumns
	} else {
		fields = strmangle.SetComplement(
			flexComponentColumns,
			flexComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FlexComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFlexComponentsUpsert(t *testing.T) {
	t.Parallel()

	if len(flexComponentColumns) == len(flexComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFlexComponentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FlexComponent{}
	if err = randomize.Struct(seed, &o, flexComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FlexComponent: %s", err)
	}

	count, err := FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, flexComponentDBTypes, false, flexComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FlexComponent: %s", err)
	}

	count, err = FlexComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
