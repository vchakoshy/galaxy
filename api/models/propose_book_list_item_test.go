// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProposeBookListItems(t *testing.T) {
	t.Parallel()

	query := ProposeBookListItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProposeBookListItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProposeBookListItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProposeBookListItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProposeBookListItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProposeBookListItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProposeBookListItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProposeBookListItemExists to return true, but got false.")
	}
}

func testProposeBookListItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	proposeBookListItemFound, err := FindProposeBookListItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if proposeBookListItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProposeBookListItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProposeBookListItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProposeBookListItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProposeBookListItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProposeBookListItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	proposeBookListItemOne := &ProposeBookListItem{}
	proposeBookListItemTwo := &ProposeBookListItem{}
	if err = randomize.Struct(seed, proposeBookListItemOne, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}
	if err = randomize.Struct(seed, proposeBookListItemTwo, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = proposeBookListItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = proposeBookListItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProposeBookListItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProposeBookListItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	proposeBookListItemOne := &ProposeBookListItem{}
	proposeBookListItemTwo := &ProposeBookListItem{}
	if err = randomize.Struct(seed, proposeBookListItemOne, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}
	if err = randomize.Struct(seed, proposeBookListItemTwo, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = proposeBookListItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = proposeBookListItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func proposeBookListItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func proposeBookListItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProposeBookListItem) error {
	*o = ProposeBookListItem{}
	return nil
}

func testProposeBookListItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProposeBookListItem{}
	o := &ProposeBookListItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem object: %s", err)
	}

	AddProposeBookListItemHook(boil.BeforeInsertHook, proposeBookListItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemBeforeInsertHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.AfterInsertHook, proposeBookListItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemAfterInsertHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.AfterSelectHook, proposeBookListItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemAfterSelectHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.BeforeUpdateHook, proposeBookListItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemBeforeUpdateHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.AfterUpdateHook, proposeBookListItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemAfterUpdateHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.BeforeDeleteHook, proposeBookListItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemBeforeDeleteHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.AfterDeleteHook, proposeBookListItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemAfterDeleteHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.BeforeUpsertHook, proposeBookListItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemBeforeUpsertHooks = []ProposeBookListItemHook{}

	AddProposeBookListItemHook(boil.AfterUpsertHook, proposeBookListItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	proposeBookListItemAfterUpsertHooks = []ProposeBookListItemHook{}
}

func testProposeBookListItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProposeBookListItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(proposeBookListItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProposeBookListItemToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProposeBookListItem
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, proposeBookListItemDBTypes, false, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProposeBookListItemSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*ProposeBookListItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProposeBookListItemToOneProposeBookListUsingProposeBookList(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProposeBookListItem
	var foreign ProposeBookList

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, proposeBookListDBTypes, false, proposeBookListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookList struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProposeBookListID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProposeBookList().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProposeBookListItemSlice{&local}
	if err = local.L.LoadProposeBookList(ctx, tx, false, (*[]*ProposeBookListItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProposeBookList == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProposeBookList = nil
	if err = local.L.LoadProposeBookList(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProposeBookList == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProposeBookListItemToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookListItem
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProposeBookListItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID, x.ID)
		}
	}
}
func testProposeBookListItemToOneSetOpProposeBookListUsingProposeBookList(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookListItem
	var b, c ProposeBookList

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProposeBookList{&b, &c} {
		err = a.SetProposeBookList(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProposeBookList != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProposeBookListItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProposeBookListID, x.ID) {
			t.Error("foreign key was wrong value", a.ProposeBookListID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProposeBookListID))
		reflect.Indirect(reflect.ValueOf(&a.ProposeBookListID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProposeBookListID, x.ID) {
			t.Error("foreign key was wrong value", a.ProposeBookListID, x.ID)
		}
	}
}

func testProposeBookListItemToOneRemoveOpProposeBookListUsingProposeBookList(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProposeBookListItem
	var b ProposeBookList

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, proposeBookListItemDBTypes, false, strmangle.SetComplement(proposeBookListItemPrimaryKeyColumns, proposeBookListItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, proposeBookListDBTypes, false, strmangle.SetComplement(proposeBookListPrimaryKeyColumns, proposeBookListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProposeBookList(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProposeBookList(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProposeBookList().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProposeBookList != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProposeBookListID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProposeBookListItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProposeBookListItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProposeBookListItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProposeBookListItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProposeBookListItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProposeBookListItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	proposeBookListItemDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `Description`: `text`, `BookID`: `int`, `Sort`: `int`, `ProposeBookListID`: `int`}
	_                          = bytes.MinRead
)

func testProposeBookListItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(proposeBookListItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(proposeBookListItemAllColumns) == len(proposeBookListItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProposeBookListItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(proposeBookListItemAllColumns) == len(proposeBookListItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProposeBookListItem{}
	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, proposeBookListItemDBTypes, true, proposeBookListItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(proposeBookListItemAllColumns, proposeBookListItemPrimaryKeyColumns) {
		fields = proposeBookListItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			proposeBookListItemAllColumns,
			proposeBookListItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProposeBookListItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProposeBookListItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(proposeBookListItemAllColumns) == len(proposeBookListItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProposeBookListItemUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProposeBookListItem{}
	if err = randomize.Struct(seed, &o, proposeBookListItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProposeBookListItem: %s", err)
	}

	count, err := ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, proposeBookListItemDBTypes, false, proposeBookListItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProposeBookListItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProposeBookListItem: %s", err)
	}

	count, err = ProposeBookListItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
