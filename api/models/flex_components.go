// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FlexComponent is an object representing the database table.
type FlexComponent struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title      string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Type       string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Class      null.String `boil:"class" json:"class,omitempty" toml:"class" yaml:"class,omitempty"`
	Fields     null.String `boil:"fields" json:"fields,omitempty" toml:"fields" yaml:"fields,omitempty"`
	FormSchema null.String `boil:"form_schema" json:"form_schema,omitempty" toml:"form_schema" yaml:"form_schema,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	Image      null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Mappings   null.String `boil:"mappings" json:"mappings,omitempty" toml:"mappings" yaml:"mappings,omitempty"`
	ViewType   string      `boil:"view_type" json:"view_type" toml:"view_type" yaml:"view_type"`

	R *flexComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flexComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlexComponentColumns = struct {
	ID         string
	Title      string
	Type       string
	Class      string
	Fields     string
	FormSchema string
	CreatedAt  string
	Image      string
	Mappings   string
	ViewType   string
}{
	ID:         "id",
	Title:      "title",
	Type:       "type",
	Class:      "class",
	Fields:     "fields",
	FormSchema: "form_schema",
	CreatedAt:  "created_at",
	Image:      "image",
	Mappings:   "mappings",
	ViewType:   "view_type",
}

// Generated where

var FlexComponentWhere = struct {
	ID         whereHelperint
	Title      whereHelperstring
	Type       whereHelperstring
	Class      whereHelpernull_String
	Fields     whereHelpernull_String
	FormSchema whereHelpernull_String
	CreatedAt  whereHelpernull_Time
	Image      whereHelpernull_String
	Mappings   whereHelpernull_String
	ViewType   whereHelperstring
}{
	ID:         whereHelperint{field: `id`},
	Title:      whereHelperstring{field: `title`},
	Type:       whereHelperstring{field: `type`},
	Class:      whereHelpernull_String{field: `class`},
	Fields:     whereHelpernull_String{field: `fields`},
	FormSchema: whereHelpernull_String{field: `form_schema`},
	CreatedAt:  whereHelpernull_Time{field: `created_at`},
	Image:      whereHelpernull_String{field: `image`},
	Mappings:   whereHelpernull_String{field: `mappings`},
	ViewType:   whereHelperstring{field: `view_type`},
}

// FlexComponentRels is where relationship names are stored.
var FlexComponentRels = struct {
	ComponentFlexPageComponents string
}{
	ComponentFlexPageComponents: "ComponentFlexPageComponents",
}

// flexComponentR is where relationships are stored.
type flexComponentR struct {
	ComponentFlexPageComponents FlexPageComponentSlice
}

// NewStruct creates a new relationship struct
func (*flexComponentR) NewStruct() *flexComponentR {
	return &flexComponentR{}
}

// flexComponentL is where Load methods for each relationship are stored.
type flexComponentL struct{}

var (
	flexComponentColumns               = []string{"id", "title", "type", "class", "fields", "form_schema", "created_at", "image", "mappings", "view_type"}
	flexComponentColumnsWithoutDefault = []string{"title", "type", "class", "fields", "form_schema", "image", "mappings"}
	flexComponentColumnsWithDefault    = []string{"id", "created_at", "view_type"}
	flexComponentPrimaryKeyColumns     = []string{"id"}
)

type (
	// FlexComponentSlice is an alias for a slice of pointers to FlexComponent.
	// This should generally be used opposed to []FlexComponent.
	FlexComponentSlice []*FlexComponent
	// FlexComponentHook is the signature for custom FlexComponent hook methods
	FlexComponentHook func(context.Context, boil.ContextExecutor, *FlexComponent) error

	flexComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flexComponentType                 = reflect.TypeOf(&FlexComponent{})
	flexComponentMapping              = queries.MakeStructMapping(flexComponentType)
	flexComponentPrimaryKeyMapping, _ = queries.BindMapping(flexComponentType, flexComponentMapping, flexComponentPrimaryKeyColumns)
	flexComponentInsertCacheMut       sync.RWMutex
	flexComponentInsertCache          = make(map[string]insertCache)
	flexComponentUpdateCacheMut       sync.RWMutex
	flexComponentUpdateCache          = make(map[string]updateCache)
	flexComponentUpsertCacheMut       sync.RWMutex
	flexComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var flexComponentBeforeInsertHooks []FlexComponentHook
var flexComponentBeforeUpdateHooks []FlexComponentHook
var flexComponentBeforeDeleteHooks []FlexComponentHook
var flexComponentBeforeUpsertHooks []FlexComponentHook

var flexComponentAfterInsertHooks []FlexComponentHook
var flexComponentAfterSelectHooks []FlexComponentHook
var flexComponentAfterUpdateHooks []FlexComponentHook
var flexComponentAfterDeleteHooks []FlexComponentHook
var flexComponentAfterUpsertHooks []FlexComponentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FlexComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FlexComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FlexComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FlexComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FlexComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FlexComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FlexComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FlexComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FlexComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFlexComponentHook registers your hook function for all future operations.
func AddFlexComponentHook(hookPoint boil.HookPoint, flexComponentHook FlexComponentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		flexComponentBeforeInsertHooks = append(flexComponentBeforeInsertHooks, flexComponentHook)
	case boil.BeforeUpdateHook:
		flexComponentBeforeUpdateHooks = append(flexComponentBeforeUpdateHooks, flexComponentHook)
	case boil.BeforeDeleteHook:
		flexComponentBeforeDeleteHooks = append(flexComponentBeforeDeleteHooks, flexComponentHook)
	case boil.BeforeUpsertHook:
		flexComponentBeforeUpsertHooks = append(flexComponentBeforeUpsertHooks, flexComponentHook)
	case boil.AfterInsertHook:
		flexComponentAfterInsertHooks = append(flexComponentAfterInsertHooks, flexComponentHook)
	case boil.AfterSelectHook:
		flexComponentAfterSelectHooks = append(flexComponentAfterSelectHooks, flexComponentHook)
	case boil.AfterUpdateHook:
		flexComponentAfterUpdateHooks = append(flexComponentAfterUpdateHooks, flexComponentHook)
	case boil.AfterDeleteHook:
		flexComponentAfterDeleteHooks = append(flexComponentAfterDeleteHooks, flexComponentHook)
	case boil.AfterUpsertHook:
		flexComponentAfterUpsertHooks = append(flexComponentAfterUpsertHooks, flexComponentHook)
	}
}

// OneG returns a single flexComponent record from the query using the global executor.
func (q flexComponentQuery) OneG(ctx context.Context) (*FlexComponent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single flexComponent record from the query.
func (q flexComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FlexComponent, error) {
	o := &FlexComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flex_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FlexComponent records from the query using the global executor.
func (q flexComponentQuery) AllG(ctx context.Context) (FlexComponentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FlexComponent records from the query.
func (q flexComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlexComponentSlice, error) {
	var o []*FlexComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FlexComponent slice")
	}

	if len(flexComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FlexComponent records in the query, and panics on error.
func (q flexComponentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FlexComponent records in the query.
func (q flexComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flex_components rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q flexComponentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q flexComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flex_components exists")
	}

	return count > 0, nil
}

// ComponentFlexPageComponents retrieves all the flex_page_component's FlexPageComponents with an executor via component_id column.
func (o *FlexComponent) ComponentFlexPageComponents(mods ...qm.QueryMod) flexPageComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`flex_page_components`.`component_id`=?", o.ID),
	)

	query := FlexPageComponents(queryMods...)
	queries.SetFrom(query.Query, "`flex_page_components`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`flex_page_components`.*"})
	}

	return query
}

// LoadComponentFlexPageComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (flexComponentL) LoadComponentFlexPageComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlexComponent interface{}, mods queries.Applicator) error {
	var slice []*FlexComponent
	var object *FlexComponent

	if singular {
		object = maybeFlexComponent.(*FlexComponent)
	} else {
		slice = *maybeFlexComponent.(*[]*FlexComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flexComponentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flexComponentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`flex_page_components`), qm.WhereIn(`component_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flex_page_components")
	}

	var resultSlice []*FlexPageComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flex_page_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flex_page_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flex_page_components")
	}

	if len(flexPageComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentFlexPageComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flexPageComponentR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ComponentID {
				local.R.ComponentFlexPageComponents = append(local.R.ComponentFlexPageComponents, foreign)
				if foreign.R == nil {
					foreign.R = &flexPageComponentR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// AddComponentFlexPageComponentsG adds the given related objects to the existing relationships
// of the flex_component, optionally inserting them as new records.
// Appends related to o.R.ComponentFlexPageComponents.
// Sets related.R.Component appropriately.
// Uses the global database handle.
func (o *FlexComponent) AddComponentFlexPageComponentsG(ctx context.Context, insert bool, related ...*FlexPageComponent) error {
	return o.AddComponentFlexPageComponents(ctx, boil.GetContextDB(), insert, related...)
}

// AddComponentFlexPageComponents adds the given related objects to the existing relationships
// of the flex_component, optionally inserting them as new records.
// Appends related to o.R.ComponentFlexPageComponents.
// Sets related.R.Component appropriately.
func (o *FlexComponent) AddComponentFlexPageComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FlexPageComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `flex_page_components` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"component_id"}),
				strmangle.WhereClause("`", "`", 0, flexPageComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &flexComponentR{
			ComponentFlexPageComponents: related,
		}
	} else {
		o.R.ComponentFlexPageComponents = append(o.R.ComponentFlexPageComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flexPageComponentR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// FlexComponents retrieves all the records using an executor.
func FlexComponents(mods ...qm.QueryMod) flexComponentQuery {
	mods = append(mods, qm.From("`flex_components`"))
	return flexComponentQuery{NewQuery(mods...)}
}

// FindFlexComponentG retrieves a single record by ID.
func FindFlexComponentG(ctx context.Context, iD int, selectCols ...string) (*FlexComponent, error) {
	return FindFlexComponent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFlexComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlexComponent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FlexComponent, error) {
	flexComponentObj := &FlexComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `flex_components` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, flexComponentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flex_components")
	}

	return flexComponentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FlexComponent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlexComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_components provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flexComponentInsertCacheMut.RLock()
	cache, cached := flexComponentInsertCache[key]
	flexComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flexComponentColumns,
			flexComponentColumnsWithDefault,
			flexComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flexComponentType, flexComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flexComponentType, flexComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `flex_components` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `flex_components` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `flex_components` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, flexComponentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flex_components")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexComponentMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_components")
	}

CacheNoHooks:
	if !cached {
		flexComponentInsertCacheMut.Lock()
		flexComponentInsertCache[key] = cache
		flexComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FlexComponent record using the global executor.
// See Update for more documentation.
func (o *FlexComponent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FlexComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlexComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	flexComponentUpdateCacheMut.RLock()
	cache, cached := flexComponentUpdateCache[key]
	flexComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flexComponentColumns,
			flexComponentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flex_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `flex_components` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, flexComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flexComponentType, flexComponentMapping, append(wl, flexComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flex_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flex_components")
	}

	if !cached {
		flexComponentUpdateCacheMut.Lock()
		flexComponentUpdateCache[key] = cache
		flexComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q flexComponentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q flexComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flex_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flex_components")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FlexComponentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlexComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `flex_components` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexComponentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flexComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flexComponent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FlexComponent) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLFlexComponentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlexComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_components provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexComponentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFlexComponentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flexComponentUpsertCacheMut.RLock()
	cache, cached := flexComponentUpsertCache[key]
	flexComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flexComponentColumns,
			flexComponentColumnsWithDefault,
			flexComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flexComponentColumns,
			flexComponentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert flex_components, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "flex_components", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `flex_components` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(flexComponentType, flexComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flexComponentType, flexComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for flex_components")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexComponentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(flexComponentType, flexComponentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for flex_components")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_components")
	}

CacheNoHooks:
	if !cached {
		flexComponentUpsertCacheMut.Lock()
		flexComponentUpsertCache[key] = cache
		flexComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FlexComponent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FlexComponent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FlexComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlexComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flexComponentPrimaryKeyMapping)
	sql := "DELETE FROM `flex_components` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flex_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flex_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flexComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flexComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flex_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_components")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FlexComponentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlexComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexComponent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(flexComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `flex_components` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexComponentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flexComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_components")
	}

	if len(flexComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FlexComponent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FlexComponent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlexComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlexComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexComponentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FlexComponentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlexComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `flex_components`.* FROM `flex_components` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlexComponentSlice")
	}

	*o = slice

	return nil
}

// FlexComponentExistsG checks if the FlexComponent row exists.
func FlexComponentExistsG(ctx context.Context, iD int) (bool, error) {
	return FlexComponentExists(ctx, boil.GetContextDB(), iD)
}

// FlexComponentExists checks if the FlexComponent row exists.
func FlexComponentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `flex_components` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flex_components exists")
	}

	return exists, nil
}
