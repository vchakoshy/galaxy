// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FlexPage is an object representing the database table.
type FlexPage struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	StoreID     int         `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	TemplateID  int         `boil:"template_id" json:"template_id" toml:"template_id" yaml:"template_id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	SettingData string      `boil:"setting_data" json:"setting_data" toml:"setting_data" yaml:"setting_data"`
	Type        string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Image       null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	R *flexPageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flexPageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlexPageColumns = struct {
	ID          string
	Name        string
	StoreID     string
	TemplateID  string
	CreatedAt   string
	Title       string
	SettingData string
	Type        string
	Description string
	Image       string
}{
	ID:          "id",
	Name:        "name",
	StoreID:     "store_id",
	TemplateID:  "template_id",
	CreatedAt:   "created_at",
	Title:       "title",
	SettingData: "setting_data",
	Type:        "type",
	Description: "description",
	Image:       "image",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FlexPageWhere = struct {
	ID          whereHelperint
	Name        whereHelpernull_String
	StoreID     whereHelperint
	TemplateID  whereHelperint
	CreatedAt   whereHelpertime_Time
	Title       whereHelperstring
	SettingData whereHelperstring
	Type        whereHelperstring
	Description whereHelpernull_String
	Image       whereHelpernull_String
}{
	ID:          whereHelperint{field: `id`},
	Name:        whereHelpernull_String{field: `name`},
	StoreID:     whereHelperint{field: `store_id`},
	TemplateID:  whereHelperint{field: `template_id`},
	CreatedAt:   whereHelpertime_Time{field: `created_at`},
	Title:       whereHelperstring{field: `title`},
	SettingData: whereHelperstring{field: `setting_data`},
	Type:        whereHelperstring{field: `type`},
	Description: whereHelpernull_String{field: `description`},
	Image:       whereHelpernull_String{field: `image`},
}

// FlexPageRels is where relationship names are stored.
var FlexPageRels = struct {
}{}

// flexPageR is where relationships are stored.
type flexPageR struct {
}

// NewStruct creates a new relationship struct
func (*flexPageR) NewStruct() *flexPageR {
	return &flexPageR{}
}

// flexPageL is where Load methods for each relationship are stored.
type flexPageL struct{}

var (
	flexPageColumns               = []string{"id", "name", "store_id", "template_id", "created_at", "title", "setting_data", "type", "description", "image"}
	flexPageColumnsWithoutDefault = []string{"name", "store_id", "template_id", "title", "setting_data", "description", "image"}
	flexPageColumnsWithDefault    = []string{"id", "created_at", "type"}
	flexPagePrimaryKeyColumns     = []string{"id"}
)

type (
	// FlexPageSlice is an alias for a slice of pointers to FlexPage.
	// This should generally be used opposed to []FlexPage.
	FlexPageSlice []*FlexPage
	// FlexPageHook is the signature for custom FlexPage hook methods
	FlexPageHook func(context.Context, boil.ContextExecutor, *FlexPage) error

	flexPageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flexPageType                 = reflect.TypeOf(&FlexPage{})
	flexPageMapping              = queries.MakeStructMapping(flexPageType)
	flexPagePrimaryKeyMapping, _ = queries.BindMapping(flexPageType, flexPageMapping, flexPagePrimaryKeyColumns)
	flexPageInsertCacheMut       sync.RWMutex
	flexPageInsertCache          = make(map[string]insertCache)
	flexPageUpdateCacheMut       sync.RWMutex
	flexPageUpdateCache          = make(map[string]updateCache)
	flexPageUpsertCacheMut       sync.RWMutex
	flexPageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var flexPageBeforeInsertHooks []FlexPageHook
var flexPageBeforeUpdateHooks []FlexPageHook
var flexPageBeforeDeleteHooks []FlexPageHook
var flexPageBeforeUpsertHooks []FlexPageHook

var flexPageAfterInsertHooks []FlexPageHook
var flexPageAfterSelectHooks []FlexPageHook
var flexPageAfterUpdateHooks []FlexPageHook
var flexPageAfterDeleteHooks []FlexPageHook
var flexPageAfterUpsertHooks []FlexPageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FlexPage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FlexPage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FlexPage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FlexPage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FlexPage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FlexPage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FlexPage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FlexPage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FlexPage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFlexPageHook registers your hook function for all future operations.
func AddFlexPageHook(hookPoint boil.HookPoint, flexPageHook FlexPageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		flexPageBeforeInsertHooks = append(flexPageBeforeInsertHooks, flexPageHook)
	case boil.BeforeUpdateHook:
		flexPageBeforeUpdateHooks = append(flexPageBeforeUpdateHooks, flexPageHook)
	case boil.BeforeDeleteHook:
		flexPageBeforeDeleteHooks = append(flexPageBeforeDeleteHooks, flexPageHook)
	case boil.BeforeUpsertHook:
		flexPageBeforeUpsertHooks = append(flexPageBeforeUpsertHooks, flexPageHook)
	case boil.AfterInsertHook:
		flexPageAfterInsertHooks = append(flexPageAfterInsertHooks, flexPageHook)
	case boil.AfterSelectHook:
		flexPageAfterSelectHooks = append(flexPageAfterSelectHooks, flexPageHook)
	case boil.AfterUpdateHook:
		flexPageAfterUpdateHooks = append(flexPageAfterUpdateHooks, flexPageHook)
	case boil.AfterDeleteHook:
		flexPageAfterDeleteHooks = append(flexPageAfterDeleteHooks, flexPageHook)
	case boil.AfterUpsertHook:
		flexPageAfterUpsertHooks = append(flexPageAfterUpsertHooks, flexPageHook)
	}
}

// OneG returns a single flexPage record from the query using the global executor.
func (q flexPageQuery) OneG(ctx context.Context) (*FlexPage, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single flexPage record from the query.
func (q flexPageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FlexPage, error) {
	o := &FlexPage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flex_pages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FlexPage records from the query using the global executor.
func (q flexPageQuery) AllG(ctx context.Context) (FlexPageSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FlexPage records from the query.
func (q flexPageQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlexPageSlice, error) {
	var o []*FlexPage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FlexPage slice")
	}

	if len(flexPageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FlexPage records in the query, and panics on error.
func (q flexPageQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FlexPage records in the query.
func (q flexPageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flex_pages rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q flexPageQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q flexPageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flex_pages exists")
	}

	return count > 0, nil
}

// FlexPages retrieves all the records using an executor.
func FlexPages(mods ...qm.QueryMod) flexPageQuery {
	mods = append(mods, qm.From("`flex_pages`"))
	return flexPageQuery{NewQuery(mods...)}
}

// FindFlexPageG retrieves a single record by ID.
func FindFlexPageG(ctx context.Context, iD int, selectCols ...string) (*FlexPage, error) {
	return FindFlexPage(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFlexPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlexPage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FlexPage, error) {
	flexPageObj := &FlexPage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `flex_pages` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, flexPageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flex_pages")
	}

	return flexPageObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FlexPage) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlexPage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_pages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexPageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flexPageInsertCacheMut.RLock()
	cache, cached := flexPageInsertCache[key]
	flexPageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flexPageColumns,
			flexPageColumnsWithDefault,
			flexPageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flexPageType, flexPageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flexPageType, flexPageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `flex_pages` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `flex_pages` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `flex_pages` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, flexPagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flex_pages")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexPageMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_pages")
	}

CacheNoHooks:
	if !cached {
		flexPageInsertCacheMut.Lock()
		flexPageInsertCache[key] = cache
		flexPageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FlexPage record using the global executor.
// See Update for more documentation.
func (o *FlexPage) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FlexPage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlexPage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	flexPageUpdateCacheMut.RLock()
	cache, cached := flexPageUpdateCache[key]
	flexPageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flexPageColumns,
			flexPagePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flex_pages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `flex_pages` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, flexPagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flexPageType, flexPageMapping, append(wl, flexPagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flex_pages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flex_pages")
	}

	if !cached {
		flexPageUpdateCacheMut.Lock()
		flexPageUpdateCache[key] = cache
		flexPageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q flexPageQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q flexPageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flex_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flex_pages")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FlexPageSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlexPageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `flex_pages` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flexPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flexPage")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FlexPage) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLFlexPageUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlexPage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_pages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexPageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFlexPageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flexPageUpsertCacheMut.RLock()
	cache, cached := flexPageUpsertCache[key]
	flexPageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flexPageColumns,
			flexPageColumnsWithDefault,
			flexPageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flexPageColumns,
			flexPagePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert flex_pages, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "flex_pages", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `flex_pages` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(flexPageType, flexPageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flexPageType, flexPageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for flex_pages")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexPageMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(flexPageType, flexPageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for flex_pages")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_pages")
	}

CacheNoHooks:
	if !cached {
		flexPageUpsertCacheMut.Lock()
		flexPageUpsertCache[key] = cache
		flexPageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FlexPage record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FlexPage) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FlexPage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlexPage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexPage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flexPagePrimaryKeyMapping)
	sql := "DELETE FROM `flex_pages` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flex_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flex_pages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flexPageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flexPageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flex_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_pages")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FlexPageSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlexPageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexPage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(flexPageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `flex_pages` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flexPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_pages")
	}

	if len(flexPageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FlexPage) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FlexPage provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlexPage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlexPage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexPageSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FlexPageSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexPageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlexPageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `flex_pages`.* FROM `flex_pages` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlexPageSlice")
	}

	*o = slice

	return nil
}

// FlexPageExistsG checks if the FlexPage row exists.
func FlexPageExistsG(ctx context.Context, iD int) (bool, error) {
	return FlexPageExists(ctx, boil.GetContextDB(), iD)
}

// FlexPageExists checks if the FlexPage row exists.
func FlexPageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `flex_pages` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flex_pages exists")
	}

	return exists, nil
}
