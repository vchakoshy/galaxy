// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FlexPageComponent is an object representing the database table.
type FlexPageComponent struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageID           int         `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	ComponentID      int         `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	ComponentSetting null.String `boil:"component_setting" json:"component_setting,omitempty" toml:"component_setting" yaml:"component_setting,omitempty"`
	CrudOrder        null.Int16  `boil:"crud_order" json:"crud_order,omitempty" toml:"crud_order" yaml:"crud_order,omitempty"`
	Active           int8        `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt        null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *flexPageComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flexPageComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlexPageComponentColumns = struct {
	ID               string
	PageID           string
	ComponentID      string
	ComponentSetting string
	CrudOrder        string
	Active           string
	CreatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	PageID:           "page_id",
	ComponentID:      "component_id",
	ComponentSetting: "component_setting",
	CrudOrder:        "crud_order",
	Active:           "active",
	CreatedAt:        "created_at",
	DeletedAt:        "deleted_at",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FlexPageComponentWhere = struct {
	ID               whereHelperint
	PageID           whereHelperint
	ComponentID      whereHelperint
	ComponentSetting whereHelpernull_String
	CrudOrder        whereHelpernull_Int16
	Active           whereHelperint8
	CreatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: `id`},
	PageID:           whereHelperint{field: `page_id`},
	ComponentID:      whereHelperint{field: `component_id`},
	ComponentSetting: whereHelpernull_String{field: `component_setting`},
	CrudOrder:        whereHelpernull_Int16{field: `crud_order`},
	Active:           whereHelperint8{field: `active`},
	CreatedAt:        whereHelpertime_Time{field: `created_at`},
	DeletedAt:        whereHelpernull_Time{field: `deleted_at`},
}

// FlexPageComponentRels is where relationship names are stored.
var FlexPageComponentRels = struct {
	Component string
	Page      string
}{
	Component: "Component",
	Page:      "Page",
}

// flexPageComponentR is where relationships are stored.
type flexPageComponentR struct {
	Component *FlexComponent
	Page      *FlexPage
}

// NewStruct creates a new relationship struct
func (*flexPageComponentR) NewStruct() *flexPageComponentR {
	return &flexPageComponentR{}
}

// flexPageComponentL is where Load methods for each relationship are stored.
type flexPageComponentL struct{}

var (
	flexPageComponentColumns               = []string{"id", "page_id", "component_id", "component_setting", "crud_order", "active", "created_at", "deleted_at"}
	flexPageComponentColumnsWithoutDefault = []string{"page_id", "component_id", "component_setting", "deleted_at"}
	flexPageComponentColumnsWithDefault    = []string{"id", "crud_order", "active", "created_at"}
	flexPageComponentPrimaryKeyColumns     = []string{"id"}
)

type (
	// FlexPageComponentSlice is an alias for a slice of pointers to FlexPageComponent.
	// This should generally be used opposed to []FlexPageComponent.
	FlexPageComponentSlice []*FlexPageComponent
	// FlexPageComponentHook is the signature for custom FlexPageComponent hook methods
	FlexPageComponentHook func(context.Context, boil.ContextExecutor, *FlexPageComponent) error

	flexPageComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flexPageComponentType                 = reflect.TypeOf(&FlexPageComponent{})
	flexPageComponentMapping              = queries.MakeStructMapping(flexPageComponentType)
	flexPageComponentPrimaryKeyMapping, _ = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, flexPageComponentPrimaryKeyColumns)
	flexPageComponentInsertCacheMut       sync.RWMutex
	flexPageComponentInsertCache          = make(map[string]insertCache)
	flexPageComponentUpdateCacheMut       sync.RWMutex
	flexPageComponentUpdateCache          = make(map[string]updateCache)
	flexPageComponentUpsertCacheMut       sync.RWMutex
	flexPageComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var flexPageComponentBeforeInsertHooks []FlexPageComponentHook
var flexPageComponentBeforeUpdateHooks []FlexPageComponentHook
var flexPageComponentBeforeDeleteHooks []FlexPageComponentHook
var flexPageComponentBeforeUpsertHooks []FlexPageComponentHook

var flexPageComponentAfterInsertHooks []FlexPageComponentHook
var flexPageComponentAfterSelectHooks []FlexPageComponentHook
var flexPageComponentAfterUpdateHooks []FlexPageComponentHook
var flexPageComponentAfterDeleteHooks []FlexPageComponentHook
var flexPageComponentAfterUpsertHooks []FlexPageComponentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FlexPageComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FlexPageComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FlexPageComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FlexPageComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FlexPageComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FlexPageComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FlexPageComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FlexPageComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FlexPageComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flexPageComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFlexPageComponentHook registers your hook function for all future operations.
func AddFlexPageComponentHook(hookPoint boil.HookPoint, flexPageComponentHook FlexPageComponentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		flexPageComponentBeforeInsertHooks = append(flexPageComponentBeforeInsertHooks, flexPageComponentHook)
	case boil.BeforeUpdateHook:
		flexPageComponentBeforeUpdateHooks = append(flexPageComponentBeforeUpdateHooks, flexPageComponentHook)
	case boil.BeforeDeleteHook:
		flexPageComponentBeforeDeleteHooks = append(flexPageComponentBeforeDeleteHooks, flexPageComponentHook)
	case boil.BeforeUpsertHook:
		flexPageComponentBeforeUpsertHooks = append(flexPageComponentBeforeUpsertHooks, flexPageComponentHook)
	case boil.AfterInsertHook:
		flexPageComponentAfterInsertHooks = append(flexPageComponentAfterInsertHooks, flexPageComponentHook)
	case boil.AfterSelectHook:
		flexPageComponentAfterSelectHooks = append(flexPageComponentAfterSelectHooks, flexPageComponentHook)
	case boil.AfterUpdateHook:
		flexPageComponentAfterUpdateHooks = append(flexPageComponentAfterUpdateHooks, flexPageComponentHook)
	case boil.AfterDeleteHook:
		flexPageComponentAfterDeleteHooks = append(flexPageComponentAfterDeleteHooks, flexPageComponentHook)
	case boil.AfterUpsertHook:
		flexPageComponentAfterUpsertHooks = append(flexPageComponentAfterUpsertHooks, flexPageComponentHook)
	}
}

// OneG returns a single flexPageComponent record from the query using the global executor.
func (q flexPageComponentQuery) OneG(ctx context.Context) (*FlexPageComponent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single flexPageComponent record from the query.
func (q flexPageComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FlexPageComponent, error) {
	o := &FlexPageComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flex_page_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FlexPageComponent records from the query using the global executor.
func (q flexPageComponentQuery) AllG(ctx context.Context) (FlexPageComponentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FlexPageComponent records from the query.
func (q flexPageComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlexPageComponentSlice, error) {
	var o []*FlexPageComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FlexPageComponent slice")
	}

	if len(flexPageComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FlexPageComponent records in the query, and panics on error.
func (q flexPageComponentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FlexPageComponent records in the query.
func (q flexPageComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flex_page_components rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q flexPageComponentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q flexPageComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flex_page_components exists")
	}

	return count > 0, nil
}

// Component pointed to by the foreign key.
func (o *FlexPageComponent) Component(mods ...qm.QueryMod) flexComponentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ComponentID),
	}

	queryMods = append(queryMods, mods...)

	query := FlexComponents(queryMods...)
	queries.SetFrom(query.Query, "`flex_components`")

	return query
}

// Page pointed to by the foreign key.
func (o *FlexPageComponent) Page(mods ...qm.QueryMod) flexPageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	query := FlexPages(queryMods...)
	queries.SetFrom(query.Query, "`flex_pages`")

	return query
}

// LoadComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flexPageComponentL) LoadComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlexPageComponent interface{}, mods queries.Applicator) error {
	var slice []*FlexPageComponent
	var object *FlexPageComponent

	if singular {
		object = maybeFlexPageComponent.(*FlexPageComponent)
	} else {
		slice = *maybeFlexPageComponent.(*[]*FlexPageComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flexPageComponentR{}
		}
		args = append(args, object.ComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flexPageComponentR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`flex_components`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FlexComponent")
	}

	var resultSlice []*FlexComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FlexComponent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for flex_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flex_components")
	}

	if len(flexPageComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Component = foreign
		if foreign.R == nil {
			foreign.R = &flexComponentR{}
		}
		foreign.R.ComponentFlexPageComponents = append(foreign.R.ComponentFlexPageComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentID == foreign.ID {
				local.R.Component = foreign
				if foreign.R == nil {
					foreign.R = &flexComponentR{}
				}
				foreign.R.ComponentFlexPageComponents = append(foreign.R.ComponentFlexPageComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flexPageComponentL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlexPageComponent interface{}, mods queries.Applicator) error {
	var slice []*FlexPageComponent
	var object *FlexPageComponent

	if singular {
		object = maybeFlexPageComponent.(*FlexPageComponent)
	} else {
		slice = *maybeFlexPageComponent.(*[]*FlexPageComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flexPageComponentR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flexPageComponentR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`flex_pages`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FlexPage")
	}

	var resultSlice []*FlexPage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FlexPage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for flex_pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flex_pages")
	}

	if len(flexPageComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &flexPageR{}
		}
		foreign.R.PageFlexPageComponents = append(foreign.R.PageFlexPageComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &flexPageR{}
				}
				foreign.R.PageFlexPageComponents = append(foreign.R.PageFlexPageComponents, local)
				break
			}
		}
	}

	return nil
}

// SetComponentG of the flexPageComponent to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentFlexPageComponents.
// Uses the global database handle.
func (o *FlexPageComponent) SetComponentG(ctx context.Context, insert bool, related *FlexComponent) error {
	return o.SetComponent(ctx, boil.GetContextDB(), insert, related)
}

// SetComponent of the flexPageComponent to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentFlexPageComponents.
func (o *FlexPageComponent) SetComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FlexComponent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flex_page_components` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"component_id"}),
		strmangle.WhereClause("`", "`", 0, flexPageComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentID = related.ID
	if o.R == nil {
		o.R = &flexPageComponentR{
			Component: related,
		}
	} else {
		o.R.Component = related
	}

	if related.R == nil {
		related.R = &flexComponentR{
			ComponentFlexPageComponents: FlexPageComponentSlice{o},
		}
	} else {
		related.R.ComponentFlexPageComponents = append(related.R.ComponentFlexPageComponents, o)
	}

	return nil
}

// SetPageG of the flexPageComponent to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.PageFlexPageComponents.
// Uses the global database handle.
func (o *FlexPageComponent) SetPageG(ctx context.Context, insert bool, related *FlexPage) error {
	return o.SetPage(ctx, boil.GetContextDB(), insert, related)
}

// SetPage of the flexPageComponent to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.PageFlexPageComponents.
func (o *FlexPageComponent) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FlexPage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flex_page_components` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"page_id"}),
		strmangle.WhereClause("`", "`", 0, flexPageComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &flexPageComponentR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &flexPageR{
			PageFlexPageComponents: FlexPageComponentSlice{o},
		}
	} else {
		related.R.PageFlexPageComponents = append(related.R.PageFlexPageComponents, o)
	}

	return nil
}

// FlexPageComponents retrieves all the records using an executor.
func FlexPageComponents(mods ...qm.QueryMod) flexPageComponentQuery {
	mods = append(mods, qm.From("`flex_page_components`"))
	return flexPageComponentQuery{NewQuery(mods...)}
}

// FindFlexPageComponentG retrieves a single record by ID.
func FindFlexPageComponentG(ctx context.Context, iD int, selectCols ...string) (*FlexPageComponent, error) {
	return FindFlexPageComponent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFlexPageComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlexPageComponent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FlexPageComponent, error) {
	flexPageComponentObj := &FlexPageComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `flex_page_components` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, flexPageComponentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flex_page_components")
	}

	return flexPageComponentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FlexPageComponent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlexPageComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_page_components provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexPageComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flexPageComponentInsertCacheMut.RLock()
	cache, cached := flexPageComponentInsertCache[key]
	flexPageComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flexPageComponentColumns,
			flexPageComponentColumnsWithDefault,
			flexPageComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `flex_page_components` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `flex_page_components` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `flex_page_components` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, flexPageComponentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flex_page_components")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexPageComponentMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_page_components")
	}

CacheNoHooks:
	if !cached {
		flexPageComponentInsertCacheMut.Lock()
		flexPageComponentInsertCache[key] = cache
		flexPageComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FlexPageComponent record using the global executor.
// See Update for more documentation.
func (o *FlexPageComponent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FlexPageComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlexPageComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	flexPageComponentUpdateCacheMut.RLock()
	cache, cached := flexPageComponentUpdateCache[key]
	flexPageComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flexPageComponentColumns,
			flexPageComponentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flex_page_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `flex_page_components` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, flexPageComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, append(wl, flexPageComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flex_page_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flex_page_components")
	}

	if !cached {
		flexPageComponentUpdateCacheMut.Lock()
		flexPageComponentUpdateCache[key] = cache
		flexPageComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q flexPageComponentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q flexPageComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flex_page_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flex_page_components")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FlexPageComponentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlexPageComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPageComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `flex_page_components` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPageComponentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flexPageComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flexPageComponent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FlexPageComponent) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLFlexPageComponentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlexPageComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flex_page_components provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flexPageComponentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFlexPageComponentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flexPageComponentUpsertCacheMut.RLock()
	cache, cached := flexPageComponentUpsertCache[key]
	flexPageComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flexPageComponentColumns,
			flexPageComponentColumnsWithDefault,
			flexPageComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flexPageComponentColumns,
			flexPageComponentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert flex_page_components, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "flex_page_components", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `flex_page_components` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for flex_page_components")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flexPageComponentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(flexPageComponentType, flexPageComponentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for flex_page_components")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flex_page_components")
	}

CacheNoHooks:
	if !cached {
		flexPageComponentUpsertCacheMut.Lock()
		flexPageComponentUpsertCache[key] = cache
		flexPageComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FlexPageComponent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FlexPageComponent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FlexPageComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlexPageComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexPageComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flexPageComponentPrimaryKeyMapping)
	sql := "DELETE FROM `flex_page_components` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flex_page_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flex_page_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flexPageComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flexPageComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flex_page_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_page_components")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FlexPageComponentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlexPageComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlexPageComponent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(flexPageComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPageComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `flex_page_components` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPageComponentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flexPageComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flex_page_components")
	}

	if len(flexPageComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FlexPageComponent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FlexPageComponent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlexPageComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlexPageComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexPageComponentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FlexPageComponentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexPageComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlexPageComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexPageComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `flex_page_components`.* FROM `flex_page_components` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexPageComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlexPageComponentSlice")
	}

	*o = slice

	return nil
}

// FlexPageComponentExistsG checks if the FlexPageComponent row exists.
func FlexPageComponentExistsG(ctx context.Context, iD int) (bool, error) {
	return FlexPageComponentExists(ctx, boil.GetContextDB(), iD)
}

// FlexPageComponentExists checks if the FlexPageComponent row exists.
func FlexPageComponentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `flex_page_components` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flex_page_components exists")
	}

	return exists, nil
}
