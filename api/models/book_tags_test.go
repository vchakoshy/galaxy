// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookTags(t *testing.T) {
	t.Parallel()

	query := BookTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BookTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookTagExists to return true, but got false.")
	}
}

func testBookTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookTagFound, err := FindBookTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookTagOne := &BookTag{}
	bookTagTwo := &BookTag{}
	if err = randomize.Struct(seed, bookTagOne, bookTagDBTypes, false, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}
	if err = randomize.Struct(seed, bookTagTwo, bookTagDBTypes, false, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookTagOne := &BookTag{}
	bookTagTwo := &BookTag{}
	if err = randomize.Struct(seed, bookTagOne, bookTagDBTypes, false, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}
	if err = randomize.Struct(seed, bookTagTwo, bookTagDBTypes, false, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func bookTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookTag) error {
	*o = BookTag{}
	return nil
}

func testBookTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookTag{}
	o := &BookTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookTag object: %s", err)
	}

	AddBookTagHook(boil.BeforeInsertHook, bookTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookTagBeforeInsertHooks = []BookTagHook{}

	AddBookTagHook(boil.AfterInsertHook, bookTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookTagAfterInsertHooks = []BookTagHook{}

	AddBookTagHook(boil.AfterSelectHook, bookTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookTagAfterSelectHooks = []BookTagHook{}

	AddBookTagHook(boil.BeforeUpdateHook, bookTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookTagBeforeUpdateHooks = []BookTagHook{}

	AddBookTagHook(boil.AfterUpdateHook, bookTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookTagAfterUpdateHooks = []BookTagHook{}

	AddBookTagHook(boil.BeforeDeleteHook, bookTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookTagBeforeDeleteHooks = []BookTagHook{}

	AddBookTagHook(boil.AfterDeleteHook, bookTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookTagAfterDeleteHooks = []BookTagHook{}

	AddBookTagHook(boil.BeforeUpsertHook, bookTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookTagBeforeUpsertHooks = []BookTagHook{}

	AddBookTagHook(boil.AfterUpsertHook, bookTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookTagAfterUpsertHooks = []BookTagHook{}
}

func testBookTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookTagDBTypes = map[string]string{`ID`: `int`, `BookID`: `int`, `TagID`: `int`, `CreatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testBookTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookTagColumns) == len(bookTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookTagColumns) == len(bookTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookTag{}
	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookTagDBTypes, true, bookTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookTagColumns, bookTagPrimaryKeyColumns) {
		fields = bookTagColumns
	} else {
		fields = strmangle.SetComplement(
			bookTagColumns,
			bookTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(bookTagColumns) == len(bookTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBookTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookTag{}
	if err = randomize.Struct(seed, &o, bookTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookTag: %s", err)
	}

	count, err := BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookTagDBTypes, false, bookTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookTag: %s", err)
	}

	count, err = BookTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
