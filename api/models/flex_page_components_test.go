// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFlexPageComponents(t *testing.T) {
	t.Parallel()

	query := FlexPageComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFlexPageComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexPageComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FlexPageComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexPageComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FlexPageComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFlexPageComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FlexPageComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FlexPageComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FlexPageComponentExists to return true, but got false.")
	}
}

func testFlexPageComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	flexPageComponentFound, err := FindFlexPageComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if flexPageComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFlexPageComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FlexPageComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFlexPageComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FlexPageComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFlexPageComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	flexPageComponentOne := &FlexPageComponent{}
	flexPageComponentTwo := &FlexPageComponent{}
	if err = randomize.Struct(seed, flexPageComponentOne, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, flexPageComponentTwo, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = flexPageComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = flexPageComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FlexPageComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFlexPageComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	flexPageComponentOne := &FlexPageComponent{}
	flexPageComponentTwo := &FlexPageComponent{}
	if err = randomize.Struct(seed, flexPageComponentOne, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, flexPageComponentTwo, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = flexPageComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = flexPageComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func flexPageComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func flexPageComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FlexPageComponent) error {
	*o = FlexPageComponent{}
	return nil
}

func testFlexPageComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FlexPageComponent{}
	o := &FlexPageComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent object: %s", err)
	}

	AddFlexPageComponentHook(boil.BeforeInsertHook, flexPageComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	flexPageComponentBeforeInsertHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.AfterInsertHook, flexPageComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	flexPageComponentAfterInsertHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.AfterSelectHook, flexPageComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	flexPageComponentAfterSelectHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.BeforeUpdateHook, flexPageComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	flexPageComponentBeforeUpdateHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.AfterUpdateHook, flexPageComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	flexPageComponentAfterUpdateHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.BeforeDeleteHook, flexPageComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	flexPageComponentBeforeDeleteHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.AfterDeleteHook, flexPageComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	flexPageComponentAfterDeleteHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.BeforeUpsertHook, flexPageComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	flexPageComponentBeforeUpsertHooks = []FlexPageComponentHook{}

	AddFlexPageComponentHook(boil.AfterUpsertHook, flexPageComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	flexPageComponentAfterUpsertHooks = []FlexPageComponentHook{}
}

func testFlexPageComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFlexPageComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(flexPageComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFlexPageComponentToOneFlexComponentUsingComponent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FlexPageComponent
	var foreign FlexComponent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, flexComponentDBTypes, false, flexComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexComponent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ComponentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Component().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FlexPageComponentSlice{&local}
	if err = local.L.LoadComponent(ctx, tx, false, (*[]*FlexPageComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Component == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Component = nil
	if err = local.L.LoadComponent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Component == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFlexPageComponentToOneFlexPageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FlexPageComponent
	var foreign FlexPage

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, flexPageComponentDBTypes, false, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, flexPageDBTypes, false, flexPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPage struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FlexPageComponentSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*FlexPageComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFlexPageComponentToOneSetOpFlexComponentUsingComponent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FlexPageComponent
	var b, c FlexComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, flexPageComponentDBTypes, false, strmangle.SetComplement(flexPageComponentPrimaryKeyColumns, flexPageComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, flexComponentDBTypes, false, strmangle.SetComplement(flexComponentPrimaryKeyColumns, flexComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, flexComponentDBTypes, false, strmangle.SetComplement(flexComponentPrimaryKeyColumns, flexComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FlexComponent{&b, &c} {
		err = a.SetComponent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Component != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ComponentFlexPageComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ComponentID != x.ID {
			t.Error("foreign key was wrong value", a.ComponentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ComponentID))
		reflect.Indirect(reflect.ValueOf(&a.ComponentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ComponentID != x.ID {
			t.Error("foreign key was wrong value", a.ComponentID, x.ID)
		}
	}
}
func testFlexPageComponentToOneSetOpFlexPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FlexPageComponent
	var b, c FlexPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, flexPageComponentDBTypes, false, strmangle.SetComplement(flexPageComponentPrimaryKeyColumns, flexPageComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, flexPageDBTypes, false, strmangle.SetComplement(flexPagePrimaryKeyColumns, flexPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, flexPageDBTypes, false, strmangle.SetComplement(flexPagePrimaryKeyColumns, flexPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FlexPage{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageFlexPageComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testFlexPageComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFlexPageComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FlexPageComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFlexPageComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FlexPageComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	flexPageComponentDBTypes = map[string]string{`ID`: `int`, `PageID`: `int`, `ComponentID`: `int`, `ComponentSetting`: `text`, `CrudOrder`: `smallint`, `Active`: `tinyint`, `CreatedAt`: `datetime`, `DeletedAt`: `date`}
	_                        = bytes.MinRead
)

func testFlexPageComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(flexPageComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(flexPageComponentColumns) == len(flexPageComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFlexPageComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(flexPageComponentColumns) == len(flexPageComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FlexPageComponent{}
	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, flexPageComponentDBTypes, true, flexPageComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(flexPageComponentColumns, flexPageComponentPrimaryKeyColumns) {
		fields = flexPageComponentColumns
	} else {
		fields = strmangle.SetComplement(
			flexPageComponentColumns,
			flexPageComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FlexPageComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFlexPageComponentsUpsert(t *testing.T) {
	t.Parallel()

	if len(flexPageComponentColumns) == len(flexPageComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFlexPageComponentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FlexPageComponent{}
	if err = randomize.Struct(seed, &o, flexPageComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FlexPageComponent: %s", err)
	}

	count, err := FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, flexPageComponentDBTypes, false, flexPageComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FlexPageComponent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FlexPageComponent: %s", err)
	}

	count, err = FlexPageComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
