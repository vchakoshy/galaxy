// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBooks(t *testing.T) {
	t.Parallel()

	query := Books()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBooksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Books().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Book exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookExists to return true, but got false.")
	}
}

func testBooksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookFound, err := FindBook(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBooksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Books().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBooksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Books().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBooksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookOne := &Book{}
	bookTwo := &Book{}
	if err = randomize.Struct(seed, bookOne, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err = randomize.Struct(seed, bookTwo, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Books().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBooksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookOne := &Book{}
	bookTwo := &Book{}
	if err = randomize.Struct(seed, bookOne, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err = randomize.Struct(seed, bookTwo, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func bookAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Book) error {
	*o = Book{}
	return nil
}

func testBooksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Book{}
	o := &Book{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Book object: %s", err)
	}

	AddBookHook(boil.BeforeInsertHook, bookBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookBeforeInsertHooks = []BookHook{}

	AddBookHook(boil.AfterInsertHook, bookAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookAfterInsertHooks = []BookHook{}

	AddBookHook(boil.AfterSelectHook, bookAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookAfterSelectHooks = []BookHook{}

	AddBookHook(boil.BeforeUpdateHook, bookBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookBeforeUpdateHooks = []BookHook{}

	AddBookHook(boil.AfterUpdateHook, bookAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookAfterUpdateHooks = []BookHook{}

	AddBookHook(boil.BeforeDeleteHook, bookBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookBeforeDeleteHooks = []BookHook{}

	AddBookHook(boil.AfterDeleteHook, bookAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookAfterDeleteHooks = []BookHook{}

	AddBookHook(boil.BeforeUpsertHook, bookBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookBeforeUpsertHooks = []BookHook{}

	AddBookHook(boil.AfterUpsertHook, bookAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookAfterUpsertHooks = []BookHook{}
}

func testBooksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBooksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookOneToOneBookStatUsingBookStat(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign BookStat
	var local Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, bookStatDBTypes, true, bookStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookStat struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.BookID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BookStat().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.BookID != foreign.BookID {
		t.Errorf("want: %v, got %v", foreign.BookID, check.BookID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadBookStat(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookStat == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BookStat = nil
	if err = local.L.LoadBookStat(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookStat == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookOneToOneSetOpBookStatUsingBookStat(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c BookStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookStatDBTypes, false, strmangle.SetComplement(bookStatPrimaryKeyColumns, bookStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookStatDBTypes, false, strmangle.SetComplement(bookStatPrimaryKeyColumns, bookStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BookStat{&b, &c} {
		err = a.SetBookStat(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BookStat != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Book != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.BookID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := BookStatExists(ctx, tx, x.BookID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.BookID {
			t.Error("foreign key was wrong value", a.ID, x.BookID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testBookToManyBookCategoryAssigns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c BookCategoryAssign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookCategoryAssignDBTypes, false, bookCategoryAssignColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BookID = a.ID
	c.BookID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BookCategoryAssigns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BookID == b.BookID {
			bFound = true
		}
		if v.BookID == c.BookID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BookSlice{&a}
	if err = a.L.LoadBookCategoryAssigns(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookCategoryAssigns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BookCategoryAssigns = nil
	if err = a.L.LoadBookCategoryAssigns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookCategoryAssigns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBookToManyAddOpBookCategoryAssigns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c, d, e BookCategoryAssign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BookCategoryAssign{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookCategoryAssignDBTypes, false, strmangle.SetComplement(bookCategoryAssignPrimaryKeyColumns, bookCategoryAssignColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BookCategoryAssign{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBookCategoryAssigns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BookID {
			t.Error("foreign key was wrong value", a.ID, first.BookID)
		}
		if a.ID != second.BookID {
			t.Error("foreign key was wrong value", a.ID, second.BookID)
		}

		if first.R.Book != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Book != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BookCategoryAssigns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BookCategoryAssigns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BookCategoryAssigns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBookToOnePublisherUsingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PublisherID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadPublisher(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingTranslator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TranslatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Translator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadTranslator(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Translator = nil
	if err = local.L.LoadTranslator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingAuthor2(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Author2ID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author2().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadAuthor2(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author2 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author2 = nil
	if err = local.L.LoadAuthor2(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author2 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingAuthor3(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Author3ID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author3().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadAuthor3(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author3 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author3 = nil
	if err = local.L.LoadAuthor3(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author3 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingTranslator2(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Translator2ID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Translator2().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadTranslator2(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator2 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Translator2 = nil
	if err = local.L.LoadTranslator2(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator2 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneAuthorUsingTranslator3(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Translator3ID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Translator3().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadTranslator3(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator3 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Translator3 = nil
	if err = local.L.LoadTranslator3(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator3 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOnePublisherUsingOriginalPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Book
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OriginalPublisherID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OriginalPublisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookSlice{&local}
	if err = local.L.LoadOriginalPublisher(ctx, tx, false, (*[]*Book)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginalPublisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OriginalPublisher = nil
	if err = local.L.LoadOriginalPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginalPublisher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PublisherID))
		reflect.Indirect(reflect.ValueOf(&a.PublisherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.PublisherID, x.ID)
		}
	}
}

func testBookToOneRemoveOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPublisher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePublisher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Publisher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Publisher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PublisherID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingTranslator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetTranslator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Translator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TranslatorBooks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TranslatorID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TranslatorID))
		reflect.Indirect(reflect.ValueOf(&a.TranslatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TranslatorID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslatorID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingTranslator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTranslator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTranslator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Translator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Translator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TranslatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TranslatorBooks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingAuthor2(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor2(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author2 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Author2Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Author2ID, x.ID) {
			t.Error("foreign key was wrong value", a.Author2ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Author2ID))
		reflect.Indirect(reflect.ValueOf(&a.Author2ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Author2ID, x.ID) {
			t.Error("foreign key was wrong value", a.Author2ID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingAuthor2(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor2(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor2(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author2().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author2 != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Author2ID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Author2Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingAuthor3(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor3(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author3 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Author3Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Author3ID, x.ID) {
			t.Error("foreign key was wrong value", a.Author3ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Author3ID))
		reflect.Indirect(reflect.ValueOf(&a.Author3ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Author3ID, x.ID) {
			t.Error("foreign key was wrong value", a.Author3ID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingAuthor3(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor3(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor3(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author3().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author3 != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Author3ID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Author3Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingTranslator2(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetTranslator2(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Translator2 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Translator2Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Translator2ID, x.ID) {
			t.Error("foreign key was wrong value", a.Translator2ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Translator2ID))
		reflect.Indirect(reflect.ValueOf(&a.Translator2ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Translator2ID, x.ID) {
			t.Error("foreign key was wrong value", a.Translator2ID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingTranslator2(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTranslator2(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTranslator2(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Translator2().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Translator2 != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Translator2ID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Translator2Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpAuthorUsingTranslator3(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetTranslator3(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Translator3 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Translator3Books[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Translator3ID, x.ID) {
			t.Error("foreign key was wrong value", a.Translator3ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Translator3ID))
		reflect.Indirect(reflect.ValueOf(&a.Translator3ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Translator3ID, x.ID) {
			t.Error("foreign key was wrong value", a.Translator3ID, x.ID)
		}
	}
}

func testBookToOneRemoveOpAuthorUsingTranslator3(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTranslator3(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTranslator3(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Translator3().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Translator3 != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Translator3ID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Translator3Books) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookToOneSetOpPublisherUsingOriginalPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetOriginalPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OriginalPublisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginalPublisherBooks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OriginalPublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.OriginalPublisherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OriginalPublisherID))
		reflect.Indirect(reflect.ValueOf(&a.OriginalPublisherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OriginalPublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.OriginalPublisherID, x.ID)
		}
	}
}

func testBookToOneRemoveOpPublisherUsingOriginalPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Book
	var b Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOriginalPublisher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOriginalPublisher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OriginalPublisher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OriginalPublisher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OriginalPublisherID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginalPublisherBooks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBooksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Books().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `SubTitle`: `varchar`, `Slug`: `varchar`, `Format`: `enum('EPUB','PDF','AUDIO','VIDEO')`, `ContentType`: `enum('book','magazine','newspaper','report','package','microbook','comic','podcast','music','article','single_video')`, `Password`: `varchar`, `Password2`: `varchar`, `PublisherID`: `int`, `PublishDate`: `date`, `Language`: `enum('FARSI','ARABIC','ENGLISH','GERMAN','SPANISH','FRENCH','ITALIAN','PORTUGUESE')`, `AuthorID`: `int`, `Author2ID`: `int`, `Author3ID`: `int`, `TranslatorID`: `int`, `Translator2ID`: `int`, `Translator3ID`: `int`, `Isbn`: `varchar`, `IsbnInt`: `varchar`, `Volume`: `int`, `PaperPrice`: `float`, `ApplyPaperPrice`: `tinyint`, `Price`: `int`, `MainPrice`: `int`, `MultiplePrice`: `tinyint`, `PriceTMP`: `int`, `BasePrice`: `enum('FIXED','TOMAN','DOLLAR')`, `Price2`: `decimal`, `PackageDiscountPublisherParticipation`: `int`, `Free`: `tinyint`, `UploadTime`: `datetime`, `Filename`: `varchar`, `SampleFilename`: `varchar`, `ImageName`: `varchar`, `ImageSquare`: `varchar`, `OriginalTitle`: `varchar`, `OriginalPublisherID`: `int`, `Description`: `text`, `Publish`: `tinyint`, `PublishTime`: `datetime`, `CheckTime`: `datetime`, `Bugs`: `set`, `CRC`: `int`, `SampleCRC`: `int`, `Keywords`: `varchar`, `Su`: `tinyint`, `Sales`: `int`, `SalesTime`: `int`, `SalesTMP`: `int`, `SalesTimeTMP`: `int`, `Rate`: `double`, `RateCount`: `int`, `New`: `tinyint`, `Featured`: `tinyint`, `LastGoodreadsCheck`: `datetime`, `Filesize`: `bigint`, `SampleFilesize`: `int`, `BKCRC`: `int`, `BKSampleCRC`: `int`, `PageCount`: `int`, `Provider`: `enum('FIDIBO','WILEY','TAYLOR')`, `NarratorID`: `int`, `Narrator2ID`: `int`, `Narrator3ID`: `int`, `Duration`: `int`, `OldCRC`: `int`, `OldFilesize`: `int`, `CRCDone`: `tinyint`, `SuitableFor`: `enum('MEN','WOMEN','BOTH')`, `FromAge`: `tinyint`, `ToAge`: `tinyint`, `Flag`: `int`, `Encrypted`: `tinyint`, `ImageCheck`: `int`, `EncryptCheck`: `int`, `SampleCheck`: `int`, `SeoTitle`: `varchar`, `SeoDescription`: `text`, `TMPTitle`: `varchar`, `SeoProblem`: `tinyint`, `Canonical`: `varchar`, `SeoFrontShow`: `tinyint`, `Extradata`: `text`, `LastUpdate`: `timestamp`}
	_           = bytes.MinRead
)

func testBooksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookColumns) == len(bookPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookDBTypes, true, bookPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBooksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookColumns) == len(bookPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Book{}
	if err = randomize.Struct(seed, o, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookDBTypes, true, bookPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookColumns, bookPrimaryKeyColumns) {
		fields = bookColumns
	} else {
		fields = strmangle.SetComplement(
			bookColumns,
			bookPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBooksUpsert(t *testing.T) {
	t.Parallel()

	if len(bookColumns) == len(bookPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBookUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Book{}
	if err = randomize.Struct(seed, &o, bookDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Book: %s", err)
	}

	count, err := Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookDBTypes, false, bookPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Book: %s", err)
	}

	count, err = Books().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
