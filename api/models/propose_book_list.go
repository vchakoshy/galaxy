// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProposeBookList is an object representing the database table.
type ProposeBookList struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	SubTitle    null.String `boil:"sub_title" json:"sub_title,omitempty" toml:"sub_title" yaml:"sub_title,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	AuthorID    null.Int    `boil:"author_id" json:"author_id,omitempty" toml:"author_id" yaml:"author_id,omitempty"`
	CoverImage  null.String `boil:"cover_image" json:"cover_image,omitempty" toml:"cover_image" yaml:"cover_image,omitempty"`
	Thumbnail   null.String `boil:"thumbnail" json:"thumbnail,omitempty" toml:"thumbnail" yaml:"thumbnail,omitempty"`
	Link        null.String `boil:"link" json:"link,omitempty" toml:"link" yaml:"link,omitempty"`
	LinkTitle   null.String `boil:"link_title" json:"link_title,omitempty" toml:"link_title" yaml:"link_title,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *proposeBookListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L proposeBookListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProposeBookListColumns = struct {
	ID          string
	Title       string
	SubTitle    string
	Description string
	AuthorID    string
	CoverImage  string
	Thumbnail   string
	Link        string
	LinkTitle   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Title:       "title",
	SubTitle:    "sub_title",
	Description: "description",
	AuthorID:    "author_id",
	CoverImage:  "cover_image",
	Thumbnail:   "thumbnail",
	Link:        "link",
	LinkTitle:   "link_title",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// Generated where

var ProposeBookListWhere = struct {
	ID          whereHelperint
	Title       whereHelpernull_String
	SubTitle    whereHelpernull_String
	Description whereHelpernull_String
	AuthorID    whereHelpernull_Int
	CoverImage  whereHelpernull_String
	Thumbnail   whereHelpernull_String
	Link        whereHelpernull_String
	LinkTitle   whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "`propose_book_list`.`id`"},
	Title:       whereHelpernull_String{field: "`propose_book_list`.`title`"},
	SubTitle:    whereHelpernull_String{field: "`propose_book_list`.`sub_title`"},
	Description: whereHelpernull_String{field: "`propose_book_list`.`description`"},
	AuthorID:    whereHelpernull_Int{field: "`propose_book_list`.`author_id`"},
	CoverImage:  whereHelpernull_String{field: "`propose_book_list`.`cover_image`"},
	Thumbnail:   whereHelpernull_String{field: "`propose_book_list`.`thumbnail`"},
	Link:        whereHelpernull_String{field: "`propose_book_list`.`link`"},
	LinkTitle:   whereHelpernull_String{field: "`propose_book_list`.`link_title`"},
	CreatedAt:   whereHelpertime_Time{field: "`propose_book_list`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`propose_book_list`.`updated_at`"},
}

// ProposeBookListRels is where relationship names are stored.
var ProposeBookListRels = struct {
	Author               string
	ProposeBookListItems string
}{
	Author:               "Author",
	ProposeBookListItems: "ProposeBookListItems",
}

// proposeBookListR is where relationships are stored.
type proposeBookListR struct {
	Author               *Author
	ProposeBookListItems ProposeBookListItemSlice
}

// NewStruct creates a new relationship struct
func (*proposeBookListR) NewStruct() *proposeBookListR {
	return &proposeBookListR{}
}

// proposeBookListL is where Load methods for each relationship are stored.
type proposeBookListL struct{}

var (
	proposeBookListAllColumns            = []string{"id", "title", "sub_title", "description", "author_id", "cover_image", "thumbnail", "link", "link_title", "created_at", "updated_at"}
	proposeBookListColumnsWithoutDefault = []string{"title", "sub_title", "description", "author_id", "cover_image", "thumbnail", "link", "link_title", "updated_at"}
	proposeBookListColumnsWithDefault    = []string{"id", "created_at"}
	proposeBookListPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProposeBookListSlice is an alias for a slice of pointers to ProposeBookList.
	// This should generally be used opposed to []ProposeBookList.
	ProposeBookListSlice []*ProposeBookList
	// ProposeBookListHook is the signature for custom ProposeBookList hook methods
	ProposeBookListHook func(context.Context, boil.ContextExecutor, *ProposeBookList) error

	proposeBookListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	proposeBookListType                 = reflect.TypeOf(&ProposeBookList{})
	proposeBookListMapping              = queries.MakeStructMapping(proposeBookListType)
	proposeBookListPrimaryKeyMapping, _ = queries.BindMapping(proposeBookListType, proposeBookListMapping, proposeBookListPrimaryKeyColumns)
	proposeBookListInsertCacheMut       sync.RWMutex
	proposeBookListInsertCache          = make(map[string]insertCache)
	proposeBookListUpdateCacheMut       sync.RWMutex
	proposeBookListUpdateCache          = make(map[string]updateCache)
	proposeBookListUpsertCacheMut       sync.RWMutex
	proposeBookListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var proposeBookListBeforeInsertHooks []ProposeBookListHook
var proposeBookListBeforeUpdateHooks []ProposeBookListHook
var proposeBookListBeforeDeleteHooks []ProposeBookListHook
var proposeBookListBeforeUpsertHooks []ProposeBookListHook

var proposeBookListAfterInsertHooks []ProposeBookListHook
var proposeBookListAfterSelectHooks []ProposeBookListHook
var proposeBookListAfterUpdateHooks []ProposeBookListHook
var proposeBookListAfterDeleteHooks []ProposeBookListHook
var proposeBookListAfterUpsertHooks []ProposeBookListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProposeBookList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProposeBookList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProposeBookList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProposeBookList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProposeBookList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProposeBookList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProposeBookList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProposeBookList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProposeBookList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proposeBookListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProposeBookListHook registers your hook function for all future operations.
func AddProposeBookListHook(hookPoint boil.HookPoint, proposeBookListHook ProposeBookListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		proposeBookListBeforeInsertHooks = append(proposeBookListBeforeInsertHooks, proposeBookListHook)
	case boil.BeforeUpdateHook:
		proposeBookListBeforeUpdateHooks = append(proposeBookListBeforeUpdateHooks, proposeBookListHook)
	case boil.BeforeDeleteHook:
		proposeBookListBeforeDeleteHooks = append(proposeBookListBeforeDeleteHooks, proposeBookListHook)
	case boil.BeforeUpsertHook:
		proposeBookListBeforeUpsertHooks = append(proposeBookListBeforeUpsertHooks, proposeBookListHook)
	case boil.AfterInsertHook:
		proposeBookListAfterInsertHooks = append(proposeBookListAfterInsertHooks, proposeBookListHook)
	case boil.AfterSelectHook:
		proposeBookListAfterSelectHooks = append(proposeBookListAfterSelectHooks, proposeBookListHook)
	case boil.AfterUpdateHook:
		proposeBookListAfterUpdateHooks = append(proposeBookListAfterUpdateHooks, proposeBookListHook)
	case boil.AfterDeleteHook:
		proposeBookListAfterDeleteHooks = append(proposeBookListAfterDeleteHooks, proposeBookListHook)
	case boil.AfterUpsertHook:
		proposeBookListAfterUpsertHooks = append(proposeBookListAfterUpsertHooks, proposeBookListHook)
	}
}

// OneG returns a single proposeBookList record from the query using the global executor.
func (q proposeBookListQuery) OneG(ctx context.Context) (*ProposeBookList, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single proposeBookList record from the query.
func (q proposeBookListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProposeBookList, error) {
	o := &ProposeBookList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for propose_book_list")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProposeBookList records from the query using the global executor.
func (q proposeBookListQuery) AllG(ctx context.Context) (ProposeBookListSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProposeBookList records from the query.
func (q proposeBookListQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProposeBookListSlice, error) {
	var o []*ProposeBookList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProposeBookList slice")
	}

	if len(proposeBookListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProposeBookList records in the query, and panics on error.
func (q proposeBookListQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProposeBookList records in the query.
func (q proposeBookListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count propose_book_list rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q proposeBookListQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q proposeBookListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if propose_book_list exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *ProposeBookList) Author(mods ...qm.QueryMod) authorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	query := Authors(queryMods...)
	queries.SetFrom(query.Query, "`author`")

	return query
}

// ProposeBookListItems retrieves all the propose_book_list_item's ProposeBookListItems with an executor.
func (o *ProposeBookList) ProposeBookListItems(mods ...qm.QueryMod) proposeBookListItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`propose_book_list_item`.`propose_book_list_id`=?", o.ID),
	)

	query := ProposeBookListItems(queryMods...)
	queries.SetFrom(query.Query, "`propose_book_list_item`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`propose_book_list_item`.*"})
	}

	return query
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (proposeBookListL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProposeBookList interface{}, mods queries.Applicator) error {
	var slice []*ProposeBookList
	var object *ProposeBookList

	if singular {
		object = maybeProposeBookList.(*ProposeBookList)
	} else {
		slice = *maybeProposeBookList.(*[]*ProposeBookList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proposeBookListR{}
		}
		if !queries.IsNil(object.AuthorID) {
			args = append(args, object.AuthorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proposeBookListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthorID) {
				args = append(args, obj.AuthorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`author`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Author")
	}

	var resultSlice []*Author
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Author")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(proposeBookListAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &authorR{}
		}
		foreign.R.ProposeBookLists = append(foreign.R.ProposeBookLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthorID, foreign.ID) {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.ProposeBookLists = append(foreign.R.ProposeBookLists, local)
				break
			}
		}
	}

	return nil
}

// LoadProposeBookListItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (proposeBookListL) LoadProposeBookListItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProposeBookList interface{}, mods queries.Applicator) error {
	var slice []*ProposeBookList
	var object *ProposeBookList

	if singular {
		object = maybeProposeBookList.(*ProposeBookList)
	} else {
		slice = *maybeProposeBookList.(*[]*ProposeBookList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proposeBookListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proposeBookListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`propose_book_list_item`), qm.WhereIn(`propose_book_list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load propose_book_list_item")
	}

	var resultSlice []*ProposeBookListItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice propose_book_list_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on propose_book_list_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for propose_book_list_item")
	}

	if len(proposeBookListItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProposeBookListItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &proposeBookListItemR{}
			}
			foreign.R.ProposeBookList = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProposeBookListID) {
				local.R.ProposeBookListItems = append(local.R.ProposeBookListItems, foreign)
				if foreign.R == nil {
					foreign.R = &proposeBookListItemR{}
				}
				foreign.R.ProposeBookList = local
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the proposeBookList to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.ProposeBookLists.
// Uses the global database handle.
func (o *ProposeBookList) SetAuthorG(ctx context.Context, insert bool, related *Author) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the proposeBookList to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.ProposeBookLists.
func (o *ProposeBookList) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Author) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `propose_book_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
		strmangle.WhereClause("`", "`", 0, proposeBookListPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthorID, related.ID)
	if o.R == nil {
		o.R = &proposeBookListR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &authorR{
			ProposeBookLists: ProposeBookListSlice{o},
		}
	} else {
		related.R.ProposeBookLists = append(related.R.ProposeBookLists, o)
	}

	return nil
}

// RemoveAuthorG relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ProposeBookList) RemoveAuthorG(ctx context.Context, related *Author) error {
	return o.RemoveAuthor(ctx, boil.GetContextDB(), related)
}

// RemoveAuthor relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProposeBookList) RemoveAuthor(ctx context.Context, exec boil.ContextExecutor, related *Author) error {
	var err error

	queries.SetScanner(&o.AuthorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Author = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProposeBookLists {
		if queries.Equal(o.AuthorID, ri.AuthorID) {
			continue
		}

		ln := len(related.R.ProposeBookLists)
		if ln > 1 && i < ln-1 {
			related.R.ProposeBookLists[i] = related.R.ProposeBookLists[ln-1]
		}
		related.R.ProposeBookLists = related.R.ProposeBookLists[:ln-1]
		break
	}
	return nil
}

// AddProposeBookListItemsG adds the given related objects to the existing relationships
// of the propose_book_list, optionally inserting them as new records.
// Appends related to o.R.ProposeBookListItems.
// Sets related.R.ProposeBookList appropriately.
// Uses the global database handle.
func (o *ProposeBookList) AddProposeBookListItemsG(ctx context.Context, insert bool, related ...*ProposeBookListItem) error {
	return o.AddProposeBookListItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddProposeBookListItems adds the given related objects to the existing relationships
// of the propose_book_list, optionally inserting them as new records.
// Appends related to o.R.ProposeBookListItems.
// Sets related.R.ProposeBookList appropriately.
func (o *ProposeBookList) AddProposeBookListItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProposeBookListItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProposeBookListID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `propose_book_list_item` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"propose_book_list_id"}),
				strmangle.WhereClause("`", "`", 0, proposeBookListItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProposeBookListID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &proposeBookListR{
			ProposeBookListItems: related,
		}
	} else {
		o.R.ProposeBookListItems = append(o.R.ProposeBookListItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &proposeBookListItemR{
				ProposeBookList: o,
			}
		} else {
			rel.R.ProposeBookList = o
		}
	}
	return nil
}

// SetProposeBookListItemsG removes all previously related items of the
// propose_book_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProposeBookList's ProposeBookListItems accordingly.
// Replaces o.R.ProposeBookListItems with related.
// Sets related.R.ProposeBookList's ProposeBookListItems accordingly.
// Uses the global database handle.
func (o *ProposeBookList) SetProposeBookListItemsG(ctx context.Context, insert bool, related ...*ProposeBookListItem) error {
	return o.SetProposeBookListItems(ctx, boil.GetContextDB(), insert, related...)
}

// SetProposeBookListItems removes all previously related items of the
// propose_book_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProposeBookList's ProposeBookListItems accordingly.
// Replaces o.R.ProposeBookListItems with related.
// Sets related.R.ProposeBookList's ProposeBookListItems accordingly.
func (o *ProposeBookList) SetProposeBookListItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProposeBookListItem) error {
	query := "update `propose_book_list_item` set `propose_book_list_id` = null where `propose_book_list_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProposeBookListItems {
			queries.SetScanner(&rel.ProposeBookListID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProposeBookList = nil
		}

		o.R.ProposeBookListItems = nil
	}
	return o.AddProposeBookListItems(ctx, exec, insert, related...)
}

// RemoveProposeBookListItemsG relationships from objects passed in.
// Removes related items from R.ProposeBookListItems (uses pointer comparison, removal does not keep order)
// Sets related.R.ProposeBookList.
// Uses the global database handle.
func (o *ProposeBookList) RemoveProposeBookListItemsG(ctx context.Context, related ...*ProposeBookListItem) error {
	return o.RemoveProposeBookListItems(ctx, boil.GetContextDB(), related...)
}

// RemoveProposeBookListItems relationships from objects passed in.
// Removes related items from R.ProposeBookListItems (uses pointer comparison, removal does not keep order)
// Sets related.R.ProposeBookList.
func (o *ProposeBookList) RemoveProposeBookListItems(ctx context.Context, exec boil.ContextExecutor, related ...*ProposeBookListItem) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProposeBookListID, nil)
		if rel.R != nil {
			rel.R.ProposeBookList = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("propose_book_list_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProposeBookListItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProposeBookListItems)
			if ln > 1 && i < ln-1 {
				o.R.ProposeBookListItems[i] = o.R.ProposeBookListItems[ln-1]
			}
			o.R.ProposeBookListItems = o.R.ProposeBookListItems[:ln-1]
			break
		}
	}

	return nil
}

// ProposeBookLists retrieves all the records using an executor.
func ProposeBookLists(mods ...qm.QueryMod) proposeBookListQuery {
	mods = append(mods, qm.From("`propose_book_list`"))
	return proposeBookListQuery{NewQuery(mods...)}
}

// FindProposeBookListG retrieves a single record by ID.
func FindProposeBookListG(ctx context.Context, iD int, selectCols ...string) (*ProposeBookList, error) {
	return FindProposeBookList(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProposeBookList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProposeBookList(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProposeBookList, error) {
	proposeBookListObj := &ProposeBookList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `propose_book_list` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, proposeBookListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from propose_book_list")
	}

	return proposeBookListObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProposeBookList) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProposeBookList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no propose_book_list provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proposeBookListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	proposeBookListInsertCacheMut.RLock()
	cache, cached := proposeBookListInsertCache[key]
	proposeBookListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			proposeBookListAllColumns,
			proposeBookListColumnsWithDefault,
			proposeBookListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `propose_book_list` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `propose_book_list` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `propose_book_list` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, proposeBookListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into propose_book_list")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == proposeBookListMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for propose_book_list")
	}

CacheNoHooks:
	if !cached {
		proposeBookListInsertCacheMut.Lock()
		proposeBookListInsertCache[key] = cache
		proposeBookListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProposeBookList record using the global executor.
// See Update for more documentation.
func (o *ProposeBookList) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProposeBookList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProposeBookList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	proposeBookListUpdateCacheMut.RLock()
	cache, cached := proposeBookListUpdateCache[key]
	proposeBookListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			proposeBookListAllColumns,
			proposeBookListPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update propose_book_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `propose_book_list` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, proposeBookListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, append(wl, proposeBookListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update propose_book_list row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for propose_book_list")
	}

	if !cached {
		proposeBookListUpdateCacheMut.Lock()
		proposeBookListUpdateCache[key] = cache
		proposeBookListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q proposeBookListQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q proposeBookListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for propose_book_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for propose_book_list")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProposeBookListSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProposeBookListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `propose_book_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in proposeBookList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all proposeBookList")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProposeBookList) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLProposeBookListUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProposeBookList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no propose_book_list provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proposeBookListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProposeBookListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	proposeBookListUpsertCacheMut.RLock()
	cache, cached := proposeBookListUpsertCache[key]
	proposeBookListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			proposeBookListAllColumns,
			proposeBookListColumnsWithDefault,
			proposeBookListColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			proposeBookListAllColumns,
			proposeBookListPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert propose_book_list, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "propose_book_list", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `propose_book_list` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for propose_book_list")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == proposeBookListMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(proposeBookListType, proposeBookListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for propose_book_list")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for propose_book_list")
	}

CacheNoHooks:
	if !cached {
		proposeBookListUpsertCacheMut.Lock()
		proposeBookListUpsertCache[key] = cache
		proposeBookListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProposeBookList record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProposeBookList) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProposeBookList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProposeBookList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProposeBookList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), proposeBookListPrimaryKeyMapping)
	sql := "DELETE FROM `propose_book_list` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from propose_book_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for propose_book_list")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q proposeBookListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no proposeBookListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from propose_book_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for propose_book_list")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProposeBookListSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProposeBookListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(proposeBookListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `propose_book_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proposeBookList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for propose_book_list")
	}

	if len(proposeBookListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProposeBookList) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ProposeBookList provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProposeBookList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProposeBookList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProposeBookListSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ProposeBookListSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProposeBookListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProposeBookListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proposeBookListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `propose_book_list`.* FROM `propose_book_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proposeBookListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProposeBookListSlice")
	}

	*o = slice

	return nil
}

// ProposeBookListExistsG checks if the ProposeBookList row exists.
func ProposeBookListExistsG(ctx context.Context, iD int) (bool, error) {
	return ProposeBookListExists(ctx, boil.GetContextDB(), iD)
}

// ProposeBookListExists checks if the ProposeBookList row exists.
func ProposeBookListExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `propose_book_list` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if propose_book_list exists")
	}

	return exists, nil
}
