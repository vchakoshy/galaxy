// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBooksTags(t *testing.T) {
	t.Parallel()

	query := BooksTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBooksTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BooksTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BooksTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BooksTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BooksTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BooksTagExists to return true, but got false.")
	}
}

func testBooksTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	booksTagFound, err := FindBooksTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if booksTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBooksTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BooksTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBooksTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BooksTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBooksTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	booksTagOne := &BooksTag{}
	booksTagTwo := &BooksTag{}
	if err = randomize.Struct(seed, booksTagOne, booksTagDBTypes, false, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}
	if err = randomize.Struct(seed, booksTagTwo, booksTagDBTypes, false, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = booksTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = booksTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BooksTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBooksTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	booksTagOne := &BooksTag{}
	booksTagTwo := &BooksTag{}
	if err = randomize.Struct(seed, booksTagOne, booksTagDBTypes, false, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}
	if err = randomize.Struct(seed, booksTagTwo, booksTagDBTypes, false, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = booksTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = booksTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func booksTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func booksTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksTag) error {
	*o = BooksTag{}
	return nil
}

func testBooksTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BooksTag{}
	o := &BooksTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, booksTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BooksTag object: %s", err)
	}

	AddBooksTagHook(boil.BeforeInsertHook, booksTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	booksTagBeforeInsertHooks = []BooksTagHook{}

	AddBooksTagHook(boil.AfterInsertHook, booksTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	booksTagAfterInsertHooks = []BooksTagHook{}

	AddBooksTagHook(boil.AfterSelectHook, booksTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	booksTagAfterSelectHooks = []BooksTagHook{}

	AddBooksTagHook(boil.BeforeUpdateHook, booksTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	booksTagBeforeUpdateHooks = []BooksTagHook{}

	AddBooksTagHook(boil.AfterUpdateHook, booksTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	booksTagAfterUpdateHooks = []BooksTagHook{}

	AddBooksTagHook(boil.BeforeDeleteHook, booksTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	booksTagBeforeDeleteHooks = []BooksTagHook{}

	AddBooksTagHook(boil.AfterDeleteHook, booksTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	booksTagAfterDeleteHooks = []BooksTagHook{}

	AddBooksTagHook(boil.BeforeUpsertHook, booksTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	booksTagBeforeUpsertHooks = []BooksTagHook{}

	AddBooksTagHook(boil.AfterUpsertHook, booksTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	booksTagAfterUpsertHooks = []BooksTagHook{}
}

func testBooksTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBooksTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(booksTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBooksTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BooksTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BooksTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	booksTagDBTypes = map[string]string{`ID`: `int`, `Tag`: `text`, `CreatedAt`: `timestamp`}
	_               = bytes.MinRead
)

func testBooksTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(booksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(booksTagColumns) == len(booksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBooksTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(booksTagColumns) == len(booksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BooksTag{}
	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, booksTagDBTypes, true, booksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(booksTagColumns, booksTagPrimaryKeyColumns) {
		fields = booksTagColumns
	} else {
		fields = strmangle.SetComplement(
			booksTagColumns,
			booksTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BooksTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBooksTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(booksTagColumns) == len(booksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBooksTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BooksTag{}
	if err = randomize.Struct(seed, &o, booksTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BooksTag: %s", err)
	}

	count, err := BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, booksTagDBTypes, false, booksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BooksTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BooksTag: %s", err)
	}

	count, err = BooksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
