// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BookStat is an object representing the database table.
type BookStat struct {
	BookID             int       `boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	DayDownloadCount   int       `boil:"day_download_count" json:"day_download_count" toml:"day_download_count" yaml:"day_download_count"`
	WeekDownloadCount  int       `boil:"week_download_count" json:"week_download_count" toml:"week_download_count" yaml:"week_download_count"`
	MonthDownloadCount int       `boil:"month_download_count" json:"month_download_count" toml:"month_download_count" yaml:"month_download_count"`
	AllDownloadCount   int       `boil:"all_download_count" json:"all_download_count" toml:"all_download_count" yaml:"all_download_count"`
	DaySalesCount      null.Int  `boil:"day_sales_count" json:"day_sales_count,omitempty" toml:"day_sales_count" yaml:"day_sales_count,omitempty"`
	WeekSalesCount     int       `boil:"week_sales_count" json:"week_sales_count" toml:"week_sales_count" yaml:"week_sales_count"`
	MonthSalesCount    null.Int  `boil:"month_sales_count" json:"month_sales_count,omitempty" toml:"month_sales_count" yaml:"month_sales_count,omitempty"`
	AllSalesCount      int       `boil:"all_sales_count" json:"all_sales_count" toml:"all_sales_count" yaml:"all_sales_count"`
	AllCommentCount    null.Int  `boil:"all_comment_count" json:"all_comment_count,omitempty" toml:"all_comment_count" yaml:"all_comment_count,omitempty"`
	LastStatsUpdate    null.Time `boil:"last_stats_update" json:"last_stats_update,omitempty" toml:"last_stats_update" yaml:"last_stats_update,omitempty"`
	LastIndexTime      null.Time `boil:"last_index_time" json:"last_index_time,omitempty" toml:"last_index_time" yaml:"last_index_time,omitempty"`
	IndexStatus        bool      `boil:"index_status" json:"index_status" toml:"index_status" yaml:"index_status"`

	R *bookStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookStatColumns = struct {
	BookID             string
	DayDownloadCount   string
	WeekDownloadCount  string
	MonthDownloadCount string
	AllDownloadCount   string
	DaySalesCount      string
	WeekSalesCount     string
	MonthSalesCount    string
	AllSalesCount      string
	AllCommentCount    string
	LastStatsUpdate    string
	LastIndexTime      string
	IndexStatus        string
}{
	BookID:             "book_id",
	DayDownloadCount:   "day_download_count",
	WeekDownloadCount:  "week_download_count",
	MonthDownloadCount: "month_download_count",
	AllDownloadCount:   "all_download_count",
	DaySalesCount:      "day_sales_count",
	WeekSalesCount:     "week_sales_count",
	MonthSalesCount:    "month_sales_count",
	AllSalesCount:      "all_sales_count",
	AllCommentCount:    "all_comment_count",
	LastStatsUpdate:    "last_stats_update",
	LastIndexTime:      "last_index_time",
	IndexStatus:        "index_status",
}

// Generated where

var BookStatWhere = struct {
	BookID             whereHelperint
	DayDownloadCount   whereHelperint
	WeekDownloadCount  whereHelperint
	MonthDownloadCount whereHelperint
	AllDownloadCount   whereHelperint
	DaySalesCount      whereHelpernull_Int
	WeekSalesCount     whereHelperint
	MonthSalesCount    whereHelpernull_Int
	AllSalesCount      whereHelperint
	AllCommentCount    whereHelpernull_Int
	LastStatsUpdate    whereHelpernull_Time
	LastIndexTime      whereHelpernull_Time
	IndexStatus        whereHelperbool
}{
	BookID:             whereHelperint{field: `book_id`},
	DayDownloadCount:   whereHelperint{field: `day_download_count`},
	WeekDownloadCount:  whereHelperint{field: `week_download_count`},
	MonthDownloadCount: whereHelperint{field: `month_download_count`},
	AllDownloadCount:   whereHelperint{field: `all_download_count`},
	DaySalesCount:      whereHelpernull_Int{field: `day_sales_count`},
	WeekSalesCount:     whereHelperint{field: `week_sales_count`},
	MonthSalesCount:    whereHelpernull_Int{field: `month_sales_count`},
	AllSalesCount:      whereHelperint{field: `all_sales_count`},
	AllCommentCount:    whereHelpernull_Int{field: `all_comment_count`},
	LastStatsUpdate:    whereHelpernull_Time{field: `last_stats_update`},
	LastIndexTime:      whereHelpernull_Time{field: `last_index_time`},
	IndexStatus:        whereHelperbool{field: `index_status`},
}

// BookStatRels is where relationship names are stored.
var BookStatRels = struct {
	Book string
}{
	Book: "Book",
}

// bookStatR is where relationships are stored.
type bookStatR struct {
	Book *Book
}

// NewStruct creates a new relationship struct
func (*bookStatR) NewStruct() *bookStatR {
	return &bookStatR{}
}

// bookStatL is where Load methods for each relationship are stored.
type bookStatL struct{}

var (
	bookStatColumns               = []string{"book_id", "day_download_count", "week_download_count", "month_download_count", "all_download_count", "day_sales_count", "week_sales_count", "month_sales_count", "all_sales_count", "all_comment_count", "last_stats_update", "last_index_time", "index_status"}
	bookStatColumnsWithoutDefault = []string{"book_id", "last_stats_update", "last_index_time"}
	bookStatColumnsWithDefault    = []string{"day_download_count", "week_download_count", "month_download_count", "all_download_count", "day_sales_count", "week_sales_count", "month_sales_count", "all_sales_count", "all_comment_count", "index_status"}
	bookStatPrimaryKeyColumns     = []string{"book_id"}
)

type (
	// BookStatSlice is an alias for a slice of pointers to BookStat.
	// This should generally be used opposed to []BookStat.
	BookStatSlice []*BookStat
	// BookStatHook is the signature for custom BookStat hook methods
	BookStatHook func(context.Context, boil.ContextExecutor, *BookStat) error

	bookStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookStatType                 = reflect.TypeOf(&BookStat{})
	bookStatMapping              = queries.MakeStructMapping(bookStatType)
	bookStatPrimaryKeyMapping, _ = queries.BindMapping(bookStatType, bookStatMapping, bookStatPrimaryKeyColumns)
	bookStatInsertCacheMut       sync.RWMutex
	bookStatInsertCache          = make(map[string]insertCache)
	bookStatUpdateCacheMut       sync.RWMutex
	bookStatUpdateCache          = make(map[string]updateCache)
	bookStatUpsertCacheMut       sync.RWMutex
	bookStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookStatBeforeInsertHooks []BookStatHook
var bookStatBeforeUpdateHooks []BookStatHook
var bookStatBeforeDeleteHooks []BookStatHook
var bookStatBeforeUpsertHooks []BookStatHook

var bookStatAfterInsertHooks []BookStatHook
var bookStatAfterSelectHooks []BookStatHook
var bookStatAfterUpdateHooks []BookStatHook
var bookStatAfterDeleteHooks []BookStatHook
var bookStatAfterUpsertHooks []BookStatHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookStatHook registers your hook function for all future operations.
func AddBookStatHook(hookPoint boil.HookPoint, bookStatHook BookStatHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bookStatBeforeInsertHooks = append(bookStatBeforeInsertHooks, bookStatHook)
	case boil.BeforeUpdateHook:
		bookStatBeforeUpdateHooks = append(bookStatBeforeUpdateHooks, bookStatHook)
	case boil.BeforeDeleteHook:
		bookStatBeforeDeleteHooks = append(bookStatBeforeDeleteHooks, bookStatHook)
	case boil.BeforeUpsertHook:
		bookStatBeforeUpsertHooks = append(bookStatBeforeUpsertHooks, bookStatHook)
	case boil.AfterInsertHook:
		bookStatAfterInsertHooks = append(bookStatAfterInsertHooks, bookStatHook)
	case boil.AfterSelectHook:
		bookStatAfterSelectHooks = append(bookStatAfterSelectHooks, bookStatHook)
	case boil.AfterUpdateHook:
		bookStatAfterUpdateHooks = append(bookStatAfterUpdateHooks, bookStatHook)
	case boil.AfterDeleteHook:
		bookStatAfterDeleteHooks = append(bookStatAfterDeleteHooks, bookStatHook)
	case boil.AfterUpsertHook:
		bookStatAfterUpsertHooks = append(bookStatAfterUpsertHooks, bookStatHook)
	}
}

// OneG returns a single bookStat record from the query using the global executor.
func (q bookStatQuery) OneG(ctx context.Context) (*BookStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single bookStat record from the query.
func (q bookStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookStat, error) {
	o := &BookStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for book_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BookStat records from the query using the global executor.
func (q bookStatQuery) AllG(ctx context.Context) (BookStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BookStat records from the query.
func (q bookStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookStatSlice, error) {
	var o []*BookStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookStat slice")
	}

	if len(bookStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BookStat records in the query, and panics on error.
func (q bookStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BookStat records in the query.
func (q bookStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count book_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q bookStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if book_stats exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *BookStat) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "`book`")

	return query
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookStatL) LoadBook(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookStat interface{}, mods queries.Applicator) error {
	var slice []*BookStat
	var object *BookStat

	if singular {
		object = maybeBookStat.(*BookStat)
	} else {
		slice = *maybeBookStat.(*[]*BookStat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookStatR{}
		}
		args = append(args, object.BookID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookStatR{}
			}

			for _, a := range args {
				if a == obj.BookID {
					continue Outer
				}
			}

			args = append(args, obj.BookID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`book`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(bookStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.BookStat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookID == foreign.ID {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.BookStat = local
				break
			}
		}
	}

	return nil
}

// SetBookG of the bookStat to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.BookStat.
// Uses the global database handle.
func (o *BookStat) SetBookG(ctx context.Context, insert bool, related *Book) error {
	return o.SetBook(ctx, boil.GetContextDB(), insert, related)
}

// SetBook of the bookStat to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.BookStat.
func (o *BookStat) SetBook(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `book_stats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"book_id"}),
		strmangle.WhereClause("`", "`", 0, bookStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BookID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookID = related.ID
	if o.R == nil {
		o.R = &bookStatR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			BookStat: o,
		}
	} else {
		related.R.BookStat = o
	}

	return nil
}

// BookStats retrieves all the records using an executor.
func BookStats(mods ...qm.QueryMod) bookStatQuery {
	mods = append(mods, qm.From("`book_stats`"))
	return bookStatQuery{NewQuery(mods...)}
}

// FindBookStatG retrieves a single record by ID.
func FindBookStatG(ctx context.Context, bookID int, selectCols ...string) (*BookStat, error) {
	return FindBookStat(ctx, boil.GetContextDB(), bookID, selectCols...)
}

// FindBookStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookStat(ctx context.Context, exec boil.ContextExecutor, bookID int, selectCols ...string) (*BookStat, error) {
	bookStatObj := &BookStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `book_stats` where `book_id`=?", sel,
	)

	q := queries.Raw(query, bookID)

	err := q.Bind(ctx, exec, bookStatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from book_stats")
	}

	return bookStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BookStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookStatInsertCacheMut.RLock()
	cache, cached := bookStatInsertCache[key]
	bookStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookStatColumns,
			bookStatColumnsWithDefault,
			bookStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookStatType, bookStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookStatType, bookStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `book_stats` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `book_stats` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `book_stats` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bookStatPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into book_stats")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BookID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for book_stats")
	}

CacheNoHooks:
	if !cached {
		bookStatInsertCacheMut.Lock()
		bookStatInsertCache[key] = cache
		bookStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BookStat record using the global executor.
// See Update for more documentation.
func (o *BookStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BookStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookStatUpdateCacheMut.RLock()
	cache, cached := bookStatUpdateCache[key]
	bookStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookStatColumns,
			bookStatPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update book_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `book_stats` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bookStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookStatType, bookStatMapping, append(wl, bookStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update book_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for book_stats")
	}

	if !cached {
		bookStatUpdateCacheMut.Lock()
		bookStatUpdateCache[key] = cache
		bookStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for book_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for book_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `book_stats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookStatPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BookStat) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLBookStatUniqueColumns = []string{
	"book_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookStatColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBookStatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookStatUpsertCacheMut.RLock()
	cache, cached := bookStatUpsertCache[key]
	bookStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookStatColumns,
			bookStatColumnsWithDefault,
			bookStatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookStatColumns,
			bookStatPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert book_stats, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "book_stats", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `book_stats` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bookStatType, bookStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookStatType, bookStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for book_stats")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bookStatType, bookStatMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for book_stats")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for book_stats")
	}

CacheNoHooks:
	if !cached {
		bookStatUpsertCacheMut.Lock()
		bookStatUpsertCache[key] = cache
		bookStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BookStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BookStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BookStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookStatPrimaryKeyMapping)
	sql := "DELETE FROM `book_stats` WHERE `book_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from book_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for book_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from book_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookStat slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(bookStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `book_stats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookStatPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_stats")
	}

	if len(bookStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BookStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BookStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookStat(ctx, exec, o.BookID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BookStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `book_stats`.* FROM `book_stats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookStatSlice")
	}

	*o = slice

	return nil
}

// BookStatExistsG checks if the BookStat row exists.
func BookStatExistsG(ctx context.Context, bookID int) (bool, error) {
	return BookStatExists(ctx, boil.GetContextDB(), bookID)
}

// BookStatExists checks if the BookStat row exists.
func BookStatExists(ctx context.Context, exec boil.ContextExecutor, bookID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `book_stats` where `book_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, bookID)
	}

	row := exec.QueryRowContext(ctx, sql, bookID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if book_stats exists")
	}

	return exists, nil
}
