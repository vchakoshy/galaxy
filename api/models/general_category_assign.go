// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GeneralCategoryAssign is an object representing the database table.
type GeneralCategoryAssign struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ItemType   string    `boil:"item_type" json:"item_type" toml:"item_type" yaml:"item_type"`
	ItemID     int       `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	CategoryID int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *generalCategoryAssignR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L generalCategoryAssignL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GeneralCategoryAssignColumns = struct {
	ID         string
	ItemType   string
	ItemID     string
	CategoryID string
	CreatedAt  string
}{
	ID:         "id",
	ItemType:   "item_type",
	ItemID:     "item_id",
	CategoryID: "category_id",
	CreatedAt:  "created_at",
}

// Generated where

var GeneralCategoryAssignWhere = struct {
	ID         whereHelperint
	ItemType   whereHelperstring
	ItemID     whereHelperint
	CategoryID whereHelperint
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint{field: "`general_category_assign`.`id`"},
	ItemType:   whereHelperstring{field: "`general_category_assign`.`item_type`"},
	ItemID:     whereHelperint{field: "`general_category_assign`.`item_id`"},
	CategoryID: whereHelperint{field: "`general_category_assign`.`category_id`"},
	CreatedAt:  whereHelpertime_Time{field: "`general_category_assign`.`created_at`"},
}

// GeneralCategoryAssignRels is where relationship names are stored.
var GeneralCategoryAssignRels = struct {
}{}

// generalCategoryAssignR is where relationships are stored.
type generalCategoryAssignR struct {
}

// NewStruct creates a new relationship struct
func (*generalCategoryAssignR) NewStruct() *generalCategoryAssignR {
	return &generalCategoryAssignR{}
}

// generalCategoryAssignL is where Load methods for each relationship are stored.
type generalCategoryAssignL struct{}

var (
	generalCategoryAssignAllColumns            = []string{"id", "item_type", "item_id", "category_id", "created_at"}
	generalCategoryAssignColumnsWithoutDefault = []string{"item_type", "item_id", "category_id"}
	generalCategoryAssignColumnsWithDefault    = []string{"id", "created_at"}
	generalCategoryAssignPrimaryKeyColumns     = []string{"id"}
)

type (
	// GeneralCategoryAssignSlice is an alias for a slice of pointers to GeneralCategoryAssign.
	// This should generally be used opposed to []GeneralCategoryAssign.
	GeneralCategoryAssignSlice []*GeneralCategoryAssign
	// GeneralCategoryAssignHook is the signature for custom GeneralCategoryAssign hook methods
	GeneralCategoryAssignHook func(context.Context, boil.ContextExecutor, *GeneralCategoryAssign) error

	generalCategoryAssignQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	generalCategoryAssignType                 = reflect.TypeOf(&GeneralCategoryAssign{})
	generalCategoryAssignMapping              = queries.MakeStructMapping(generalCategoryAssignType)
	generalCategoryAssignPrimaryKeyMapping, _ = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, generalCategoryAssignPrimaryKeyColumns)
	generalCategoryAssignInsertCacheMut       sync.RWMutex
	generalCategoryAssignInsertCache          = make(map[string]insertCache)
	generalCategoryAssignUpdateCacheMut       sync.RWMutex
	generalCategoryAssignUpdateCache          = make(map[string]updateCache)
	generalCategoryAssignUpsertCacheMut       sync.RWMutex
	generalCategoryAssignUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var generalCategoryAssignBeforeInsertHooks []GeneralCategoryAssignHook
var generalCategoryAssignBeforeUpdateHooks []GeneralCategoryAssignHook
var generalCategoryAssignBeforeDeleteHooks []GeneralCategoryAssignHook
var generalCategoryAssignBeforeUpsertHooks []GeneralCategoryAssignHook

var generalCategoryAssignAfterInsertHooks []GeneralCategoryAssignHook
var generalCategoryAssignAfterSelectHooks []GeneralCategoryAssignHook
var generalCategoryAssignAfterUpdateHooks []GeneralCategoryAssignHook
var generalCategoryAssignAfterDeleteHooks []GeneralCategoryAssignHook
var generalCategoryAssignAfterUpsertHooks []GeneralCategoryAssignHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GeneralCategoryAssign) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GeneralCategoryAssign) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GeneralCategoryAssign) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GeneralCategoryAssign) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GeneralCategoryAssign) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GeneralCategoryAssign) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GeneralCategoryAssign) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GeneralCategoryAssign) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GeneralCategoryAssign) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range generalCategoryAssignAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeneralCategoryAssignHook registers your hook function for all future operations.
func AddGeneralCategoryAssignHook(hookPoint boil.HookPoint, generalCategoryAssignHook GeneralCategoryAssignHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		generalCategoryAssignBeforeInsertHooks = append(generalCategoryAssignBeforeInsertHooks, generalCategoryAssignHook)
	case boil.BeforeUpdateHook:
		generalCategoryAssignBeforeUpdateHooks = append(generalCategoryAssignBeforeUpdateHooks, generalCategoryAssignHook)
	case boil.BeforeDeleteHook:
		generalCategoryAssignBeforeDeleteHooks = append(generalCategoryAssignBeforeDeleteHooks, generalCategoryAssignHook)
	case boil.BeforeUpsertHook:
		generalCategoryAssignBeforeUpsertHooks = append(generalCategoryAssignBeforeUpsertHooks, generalCategoryAssignHook)
	case boil.AfterInsertHook:
		generalCategoryAssignAfterInsertHooks = append(generalCategoryAssignAfterInsertHooks, generalCategoryAssignHook)
	case boil.AfterSelectHook:
		generalCategoryAssignAfterSelectHooks = append(generalCategoryAssignAfterSelectHooks, generalCategoryAssignHook)
	case boil.AfterUpdateHook:
		generalCategoryAssignAfterUpdateHooks = append(generalCategoryAssignAfterUpdateHooks, generalCategoryAssignHook)
	case boil.AfterDeleteHook:
		generalCategoryAssignAfterDeleteHooks = append(generalCategoryAssignAfterDeleteHooks, generalCategoryAssignHook)
	case boil.AfterUpsertHook:
		generalCategoryAssignAfterUpsertHooks = append(generalCategoryAssignAfterUpsertHooks, generalCategoryAssignHook)
	}
}

// OneG returns a single generalCategoryAssign record from the query using the global executor.
func (q generalCategoryAssignQuery) OneG(ctx context.Context) (*GeneralCategoryAssign, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single generalCategoryAssign record from the query.
func (q generalCategoryAssignQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GeneralCategoryAssign, error) {
	o := &GeneralCategoryAssign{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for general_category_assign")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all GeneralCategoryAssign records from the query using the global executor.
func (q generalCategoryAssignQuery) AllG(ctx context.Context) (GeneralCategoryAssignSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GeneralCategoryAssign records from the query.
func (q generalCategoryAssignQuery) All(ctx context.Context, exec boil.ContextExecutor) (GeneralCategoryAssignSlice, error) {
	var o []*GeneralCategoryAssign

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeneralCategoryAssign slice")
	}

	if len(generalCategoryAssignAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all GeneralCategoryAssign records in the query, and panics on error.
func (q generalCategoryAssignQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GeneralCategoryAssign records in the query.
func (q generalCategoryAssignQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count general_category_assign rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q generalCategoryAssignQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q generalCategoryAssignQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if general_category_assign exists")
	}

	return count > 0, nil
}

// GeneralCategoryAssigns retrieves all the records using an executor.
func GeneralCategoryAssigns(mods ...qm.QueryMod) generalCategoryAssignQuery {
	mods = append(mods, qm.From("`general_category_assign`"))
	return generalCategoryAssignQuery{NewQuery(mods...)}
}

// FindGeneralCategoryAssignG retrieves a single record by ID.
func FindGeneralCategoryAssignG(ctx context.Context, iD int, selectCols ...string) (*GeneralCategoryAssign, error) {
	return FindGeneralCategoryAssign(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindGeneralCategoryAssign retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeneralCategoryAssign(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GeneralCategoryAssign, error) {
	generalCategoryAssignObj := &GeneralCategoryAssign{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `general_category_assign` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, generalCategoryAssignObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from general_category_assign")
	}

	return generalCategoryAssignObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GeneralCategoryAssign) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GeneralCategoryAssign) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no general_category_assign provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(generalCategoryAssignColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	generalCategoryAssignInsertCacheMut.RLock()
	cache, cached := generalCategoryAssignInsertCache[key]
	generalCategoryAssignInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			generalCategoryAssignAllColumns,
			generalCategoryAssignColumnsWithDefault,
			generalCategoryAssignColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `general_category_assign` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `general_category_assign` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `general_category_assign` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, generalCategoryAssignPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into general_category_assign")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == generalCategoryAssignMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for general_category_assign")
	}

CacheNoHooks:
	if !cached {
		generalCategoryAssignInsertCacheMut.Lock()
		generalCategoryAssignInsertCache[key] = cache
		generalCategoryAssignInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single GeneralCategoryAssign record using the global executor.
// See Update for more documentation.
func (o *GeneralCategoryAssign) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GeneralCategoryAssign.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GeneralCategoryAssign) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	generalCategoryAssignUpdateCacheMut.RLock()
	cache, cached := generalCategoryAssignUpdateCache[key]
	generalCategoryAssignUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			generalCategoryAssignAllColumns,
			generalCategoryAssignPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update general_category_assign, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `general_category_assign` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, generalCategoryAssignPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, append(wl, generalCategoryAssignPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update general_category_assign row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for general_category_assign")
	}

	if !cached {
		generalCategoryAssignUpdateCacheMut.Lock()
		generalCategoryAssignUpdateCache[key] = cache
		generalCategoryAssignUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q generalCategoryAssignQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q generalCategoryAssignQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for general_category_assign")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for general_category_assign")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GeneralCategoryAssignSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeneralCategoryAssignSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalCategoryAssignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `general_category_assign` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, generalCategoryAssignPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in generalCategoryAssign slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all generalCategoryAssign")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GeneralCategoryAssign) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLGeneralCategoryAssignUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GeneralCategoryAssign) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no general_category_assign provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(generalCategoryAssignColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGeneralCategoryAssignUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	generalCategoryAssignUpsertCacheMut.RLock()
	cache, cached := generalCategoryAssignUpsertCache[key]
	generalCategoryAssignUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			generalCategoryAssignAllColumns,
			generalCategoryAssignColumnsWithDefault,
			generalCategoryAssignColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			generalCategoryAssignAllColumns,
			generalCategoryAssignPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert general_category_assign, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "general_category_assign", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `general_category_assign` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for general_category_assign")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == generalCategoryAssignMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(generalCategoryAssignType, generalCategoryAssignMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for general_category_assign")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for general_category_assign")
	}

CacheNoHooks:
	if !cached {
		generalCategoryAssignUpsertCacheMut.Lock()
		generalCategoryAssignUpsertCache[key] = cache
		generalCategoryAssignUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single GeneralCategoryAssign record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GeneralCategoryAssign) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GeneralCategoryAssign record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GeneralCategoryAssign) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GeneralCategoryAssign provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), generalCategoryAssignPrimaryKeyMapping)
	sql := "DELETE FROM `general_category_assign` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from general_category_assign")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for general_category_assign")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q generalCategoryAssignQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no generalCategoryAssignQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from general_category_assign")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for general_category_assign")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GeneralCategoryAssignSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeneralCategoryAssignSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(generalCategoryAssignBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalCategoryAssignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `general_category_assign` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, generalCategoryAssignPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from generalCategoryAssign slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for general_category_assign")
	}

	if len(generalCategoryAssignAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GeneralCategoryAssign) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no GeneralCategoryAssign provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GeneralCategoryAssign) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGeneralCategoryAssign(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeneralCategoryAssignSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GeneralCategoryAssignSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeneralCategoryAssignSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GeneralCategoryAssignSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalCategoryAssignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `general_category_assign`.* FROM `general_category_assign` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, generalCategoryAssignPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeneralCategoryAssignSlice")
	}

	*o = slice

	return nil
}

// GeneralCategoryAssignExistsG checks if the GeneralCategoryAssign row exists.
func GeneralCategoryAssignExistsG(ctx context.Context, iD int) (bool, error) {
	return GeneralCategoryAssignExists(ctx, boil.GetContextDB(), iD)
}

// GeneralCategoryAssignExists checks if the GeneralCategoryAssign row exists.
func GeneralCategoryAssignExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `general_category_assign` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if general_category_assign exists")
	}

	return exists, nil
}
