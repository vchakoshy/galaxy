// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAllNews(t *testing.T) {
	t.Parallel()

	query := AllNews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAllNewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllNewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AllNews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllNewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NewsSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllNewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NewsExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if News exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NewsExists to return true, but got false.")
	}
}

func testAllNewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	newsFound, err := FindNews(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if newsFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAllNewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AllNews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAllNewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AllNews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAllNewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	newsOne := &News{}
	newsTwo := &News{}
	if err = randomize.Struct(seed, newsOne, newsDBTypes, false, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}
	if err = randomize.Struct(seed, newsTwo, newsDBTypes, false, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = newsOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = newsTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AllNews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAllNewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	newsOne := &News{}
	newsTwo := &News{}
	if err = randomize.Struct(seed, newsOne, newsDBTypes, false, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}
	if err = randomize.Struct(seed, newsTwo, newsDBTypes, false, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = newsOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = newsTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func newsBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func newsAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *News) error {
	*o = News{}
	return nil
}

func testAllNewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &News{}
	o := &News{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, newsDBTypes, false); err != nil {
		t.Errorf("Unable to randomize News object: %s", err)
	}

	AddNewsHook(boil.BeforeInsertHook, newsBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	newsBeforeInsertHooks = []NewsHook{}

	AddNewsHook(boil.AfterInsertHook, newsAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	newsAfterInsertHooks = []NewsHook{}

	AddNewsHook(boil.AfterSelectHook, newsAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	newsAfterSelectHooks = []NewsHook{}

	AddNewsHook(boil.BeforeUpdateHook, newsBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	newsBeforeUpdateHooks = []NewsHook{}

	AddNewsHook(boil.AfterUpdateHook, newsAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	newsAfterUpdateHooks = []NewsHook{}

	AddNewsHook(boil.BeforeDeleteHook, newsBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	newsBeforeDeleteHooks = []NewsHook{}

	AddNewsHook(boil.AfterDeleteHook, newsAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	newsAfterDeleteHooks = []NewsHook{}

	AddNewsHook(boil.BeforeUpsertHook, newsBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	newsBeforeUpsertHooks = []NewsHook{}

	AddNewsHook(boil.AfterUpsertHook, newsAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	newsAfterUpsertHooks = []NewsHook{}
}

func testAllNewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAllNewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(newsColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNewsToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local News
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NewsSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*News)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNewsToOneAuthorUsingTranslator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local News
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TranslatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Translator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NewsSlice{&local}
	if err = local.L.LoadTranslator(ctx, tx, false, (*[]*News)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Translator = nil
	if err = local.L.LoadTranslator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNewsToOnePublisherUsingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local News
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PublisherID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NewsSlice{&local}
	if err = local.L.LoadPublisher(ctx, tx, false, (*[]*News)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNewsToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.News[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testNewsToOneRemoveOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.News) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNewsToOneSetOpAuthorUsingTranslator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetTranslator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Translator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TranslatorNews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TranslatorID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TranslatorID))
		reflect.Indirect(reflect.ValueOf(&a.TranslatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TranslatorID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslatorID, x.ID)
		}
	}
}

func testNewsToOneRemoveOpAuthorUsingTranslator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTranslator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTranslator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Translator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Translator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TranslatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TranslatorNews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNewsToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.News[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PublisherID))
		reflect.Indirect(reflect.ValueOf(&a.PublisherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PublisherID, x.ID) {
			t.Error("foreign key was wrong value", a.PublisherID, x.ID)
		}
	}
}

func testNewsToOneRemoveOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a News
	var b Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, newsDBTypes, false, strmangle.SetComplement(newsPrimaryKeyColumns, newsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPublisher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePublisher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Publisher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Publisher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PublisherID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.News) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAllNewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAllNewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NewsSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAllNewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AllNews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	newsDBTypes = map[string]string{`ID`: `int`, `NewsType`: `enum('PUBLIC','PRIVATE')`, `Title`: `varchar`, `SubTitle`: `varchar`, `Content`: `text`, `PlainText`: `text`, `AuthorID`: `int`, `TranslatorID`: `int`, `PublisherID`: `int`, `Thumbnail`: `varchar`, `UserID`: `int`, `AddTime`: `datetime`, `Enabled`: `tinyint`, `Link`: `varchar`, `ReadingDuration`: `int`, `Status`: `tinyint`, `FromTime`: `datetime`, `ToTime`: `datetime`}
	_           = bytes.MinRead
)

func testAllNewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(newsPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(newsAllColumns) == len(newsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, newsDBTypes, true, newsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAllNewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(newsAllColumns) == len(newsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &News{}
	if err = randomize.Struct(seed, o, newsDBTypes, true, newsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, newsDBTypes, true, newsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(newsAllColumns, newsPrimaryKeyColumns) {
		fields = newsAllColumns
	} else {
		fields = strmangle.SetComplement(
			newsAllColumns,
			newsPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NewsSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAllNewsUpsert(t *testing.T) {
	t.Parallel()

	if len(newsAllColumns) == len(newsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLNewsUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := News{}
	if err = randomize.Struct(seed, &o, newsDBTypes, false); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert News: %s", err)
	}

	count, err := AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, newsDBTypes, false, newsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize News struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert News: %s", err)
	}

	count, err = AllNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
